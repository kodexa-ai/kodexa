name: Build and Package with Poetry (Feature)

on:
  push:
    branches-ignore:
      - main
      - 'releases/*'
      - develop

jobs:
  build-and-publish-python-package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Run Creds Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.ref_name }}
          head: HEAD
          extra_args: --debug
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.3.2"
      - name: Increment version
        run: |
        # Gets the branch name
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
        # Create versioning
          VERSION=$(poetry version --short)
          LAST_VERSION_PART=${VERSION#*.}
          LAST_VERSION_PART_PREFIX=${LAST_VERSION_PART%??}
          LAST_VERSION_PART_PREFIX=${LAST_VERSION_PART_PREFIX%.*}
        # If branch name starts with bugs; append b where it stands as BUGS
          if [[ $BRANCH_NAME == "fix"* ]]; then
               NEW_LAST_VERSION_PART=${LAST_VERSION_PART_PREFIX}b${GITHUB_RUN_ID}
        # If branch name starts with bugs; append f where it stands for FEEATURE
          elif [[ $BRANCH_NAME == "feature"* ]]; then
               NEW_LAST_VERSION_PART=${LAST_VERSION_PART_PREFIX}f${GITHUB_RUN_ID}
        # If branch name starts test; append RC on it
          elif [[ $BRANCH_NAME == "test"* ]]; then
               NEW_LAST_VERSION_PART=${LAST_VERSION_PART_PREFIX}rc${GITHUB_RUN_ID}
        # If branch name starts with MAIN
          elif [[ $BRANCH_NAME == "main"* ]]; then
               NEW_LAST_VERSION_PART=${LAST_VERSION_PART_PREFIX}${GITHUB_RUN_ID}
          else
               echo "Invalid branch name"
               exit 1
          fi
          NEW_VERSION=${VERSION%.*}.${NEW_LAST_VERSION_PART}
          echo $NEW_VERSION
          echo "::set-output name=version::$NEW_VERSION"
          echo "::set-output name=versionType::Release"
          poetry version $NEW_VERSION --no-ansi
      - name: Install dependencies
        run: poetry install
      - name: Lint with flake8
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          yes | poetry run mypy --install-types kodexa || true
      - name: Test with pytest
        run: |
          poetry run pytest
      - name: Build Package
        run: |
          poetry build
      - name: Publish a Python distribution to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish
    #      - name: Publish a Python distribution to PyPI
    #        uses: pypa/gh-action-pypi-publish@release/v1
    #        with:
    #          user: __token__
    #          password: ${{ secrets.PYPI_TOKEN }}
