# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BotMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_session': 'bool',
        'graph_cells': 'list[GraphCell]',
        'triggers': 'list[BotEventTrigger]'
    }

    attribute_map = {
        'create_session': 'createSession',
        'graph_cells': 'graphCells',
        'triggers': 'triggers'
    }

    def __init__(self, create_session=None, graph_cells=None, triggers=None):  # noqa: E501
        """BotMetadata - a model defined in Swagger"""  # noqa: E501
        self._create_session = None
        self._graph_cells = None
        self._triggers = None
        self.discriminator = None
        if create_session is not None:
            self.create_session = create_session
        if graph_cells is not None:
            self.graph_cells = graph_cells
        if triggers is not None:
            self.triggers = triggers

    @property
    def create_session(self):
        """Gets the create_session of this BotMetadata.  # noqa: E501


        :return: The create_session of this BotMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._create_session

    @create_session.setter
    def create_session(self, create_session):
        """Sets the create_session of this BotMetadata.


        :param create_session: The create_session of this BotMetadata.  # noqa: E501
        :type: bool
        """

        self._create_session = create_session

    @property
    def graph_cells(self):
        """Gets the graph_cells of this BotMetadata.  # noqa: E501


        :return: The graph_cells of this BotMetadata.  # noqa: E501
        :rtype: list[GraphCell]
        """
        return self._graph_cells

    @graph_cells.setter
    def graph_cells(self, graph_cells):
        """Sets the graph_cells of this BotMetadata.


        :param graph_cells: The graph_cells of this BotMetadata.  # noqa: E501
        :type: list[GraphCell]
        """

        self._graph_cells = graph_cells

    @property
    def triggers(self):
        """Gets the triggers of this BotMetadata.  # noqa: E501


        :return: The triggers of this BotMetadata.  # noqa: E501
        :rtype: list[BotEventTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this BotMetadata.


        :param triggers: The triggers of this BotMetadata.  # noqa: E501
        :type: list[BotEventTrigger]
        """

        self._triggers = triggers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
