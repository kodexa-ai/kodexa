# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudPipeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exceptions': 'list[ExceptionDetails]',
        'id': 'str',
        'ref': 'str',
        'steps': 'list[CloudExecutionStep]',
        'valid': 'bool'
    }

    attribute_map = {
        'exceptions': 'exceptions',
        'id': 'id',
        'ref': 'ref',
        'steps': 'steps',
        'valid': 'valid'
    }

    def __init__(self, exceptions=None, id=None, ref=None, steps=None, valid=None):  # noqa: E501
        """CloudPipeline - a model defined in Swagger"""  # noqa: E501
        self._exceptions = None
        self._id = None
        self._ref = None
        self._steps = None
        self._valid = None
        self.discriminator = None
        if exceptions is not None:
            self.exceptions = exceptions
        if id is not None:
            self.id = id
        if ref is not None:
            self.ref = ref
        if steps is not None:
            self.steps = steps
        if valid is not None:
            self.valid = valid

    @property
    def exceptions(self):
        """Gets the exceptions of this CloudPipeline.  # noqa: E501


        :return: The exceptions of this CloudPipeline.  # noqa: E501
        :rtype: list[ExceptionDetails]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this CloudPipeline.


        :param exceptions: The exceptions of this CloudPipeline.  # noqa: E501
        :type: list[ExceptionDetails]
        """

        self._exceptions = exceptions

    @property
    def id(self):
        """Gets the id of this CloudPipeline.  # noqa: E501


        :return: The id of this CloudPipeline.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudPipeline.


        :param id: The id of this CloudPipeline.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ref(self):
        """Gets the ref of this CloudPipeline.  # noqa: E501


        :return: The ref of this CloudPipeline.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CloudPipeline.


        :param ref: The ref of this CloudPipeline.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def steps(self):
        """Gets the steps of this CloudPipeline.  # noqa: E501


        :return: The steps of this CloudPipeline.  # noqa: E501
        :rtype: list[CloudExecutionStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this CloudPipeline.


        :param steps: The steps of this CloudPipeline.  # noqa: E501
        :type: list[CloudExecutionStep]
        """

        self._steps = steps

    @property
    def valid(self):
        """Gets the valid of this CloudPipeline.  # noqa: E501


        :return: The valid of this CloudPipeline.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this CloudPipeline.


        :param valid: The valid of this CloudPipeline.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudPipeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudPipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
