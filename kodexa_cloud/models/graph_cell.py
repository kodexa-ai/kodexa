# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GraphCell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'options': 'object',
        'post': 'list[CellProcessor]',
        'pre': 'list[CellProcessor]',
        'ref': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'options': 'options',
        'post': 'post',
        'pre': 'pre',
        'ref': 'ref',
        'type': 'type'
    }

    def __init__(self, id=None, options=None, post=None, pre=None, ref=None, type=None):  # noqa: E501
        """GraphCell - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._options = None
        self._post = None
        self._pre = None
        self._ref = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if options is not None:
            self.options = options
        if post is not None:
            self.post = post
        if pre is not None:
            self.pre = pre
        if ref is not None:
            self.ref = ref
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this GraphCell.  # noqa: E501


        :return: The id of this GraphCell.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GraphCell.


        :param id: The id of this GraphCell.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def options(self):
        """Gets the options of this GraphCell.  # noqa: E501


        :return: The options of this GraphCell.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GraphCell.


        :param options: The options of this GraphCell.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def post(self):
        """Gets the post of this GraphCell.  # noqa: E501


        :return: The post of this GraphCell.  # noqa: E501
        :rtype: list[CellProcessor]
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this GraphCell.


        :param post: The post of this GraphCell.  # noqa: E501
        :type: list[CellProcessor]
        """

        self._post = post

    @property
    def pre(self):
        """Gets the pre of this GraphCell.  # noqa: E501


        :return: The pre of this GraphCell.  # noqa: E501
        :rtype: list[CellProcessor]
        """
        return self._pre

    @pre.setter
    def pre(self, pre):
        """Sets the pre of this GraphCell.


        :param pre: The pre of this GraphCell.  # noqa: E501
        :type: list[CellProcessor]
        """

        self._pre = pre

    @property
    def ref(self):
        """Gets the ref of this GraphCell.  # noqa: E501


        :return: The ref of this GraphCell.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this GraphCell.


        :param ref: The ref of this GraphCell.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def type(self):
        """Gets the type of this GraphCell.  # noqa: E501


        :return: The type of this GraphCell.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GraphCell.


        :param type: The type of this GraphCell.  # noqa: E501
        :type: str
        """
        allowed_values = ["PIPELINE", "ACTION", "DECISION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphCell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphCell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
