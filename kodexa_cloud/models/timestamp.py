# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Timestamp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'int',
        'day': 'int',
        'hours': 'int',
        'minutes': 'int',
        'month': 'int',
        'nanos': 'int',
        'seconds': 'int',
        'time': 'int',
        'timezone_offset': 'int',
        'year': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'day': 'day',
        'hours': 'hours',
        'minutes': 'minutes',
        'month': 'month',
        'nanos': 'nanos',
        'seconds': 'seconds',
        'time': 'time',
        'timezone_offset': 'timezoneOffset',
        'year': 'year'
    }

    def __init__(self, _date=None, day=None, hours=None, minutes=None, month=None, nanos=None, seconds=None, time=None, timezone_offset=None, year=None):  # noqa: E501
        """Timestamp - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._day = None
        self._hours = None
        self._minutes = None
        self._month = None
        self._nanos = None
        self._seconds = None
        self._time = None
        self._timezone_offset = None
        self._year = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if day is not None:
            self.day = day
        if hours is not None:
            self.hours = hours
        if minutes is not None:
            self.minutes = minutes
        if month is not None:
            self.month = month
        if nanos is not None:
            self.nanos = nanos
        if seconds is not None:
            self.seconds = seconds
        if time is not None:
            self.time = time
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset
        if year is not None:
            self.year = year

    @property
    def _date(self):
        """Gets the _date of this Timestamp.  # noqa: E501


        :return: The _date of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Timestamp.


        :param _date: The _date of this Timestamp.  # noqa: E501
        :type: int
        """

        self.__date = _date

    @property
    def day(self):
        """Gets the day of this Timestamp.  # noqa: E501


        :return: The day of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Timestamp.


        :param day: The day of this Timestamp.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def hours(self):
        """Gets the hours of this Timestamp.  # noqa: E501


        :return: The hours of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this Timestamp.


        :param hours: The hours of this Timestamp.  # noqa: E501
        :type: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this Timestamp.  # noqa: E501


        :return: The minutes of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this Timestamp.


        :param minutes: The minutes of this Timestamp.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def month(self):
        """Gets the month of this Timestamp.  # noqa: E501


        :return: The month of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Timestamp.


        :param month: The month of this Timestamp.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def nanos(self):
        """Gets the nanos of this Timestamp.  # noqa: E501


        :return: The nanos of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._nanos

    @nanos.setter
    def nanos(self, nanos):
        """Sets the nanos of this Timestamp.


        :param nanos: The nanos of this Timestamp.  # noqa: E501
        :type: int
        """

        self._nanos = nanos

    @property
    def seconds(self):
        """Gets the seconds of this Timestamp.  # noqa: E501


        :return: The seconds of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this Timestamp.


        :param seconds: The seconds of this Timestamp.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    @property
    def time(self):
        """Gets the time of this Timestamp.  # noqa: E501


        :return: The time of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Timestamp.


        :param time: The time of this Timestamp.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this Timestamp.  # noqa: E501


        :return: The timezone_offset of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this Timestamp.


        :param timezone_offset: The timezone_offset of this Timestamp.  # noqa: E501
        :type: int
        """

        self._timezone_offset = timezone_offset

    @property
    def year(self):
        """Gets the year of this Timestamp.  # noqa: E501


        :return: The year of this Timestamp.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Timestamp.


        :param year: The year of this Timestamp.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Timestamp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timestamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
