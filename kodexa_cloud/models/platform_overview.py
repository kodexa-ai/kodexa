# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlatformOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_time': 'str',
        'commit_id': 'str',
        'dsn': 'str',
        'environment': 'str',
        'host_name': 'str',
        'name': 'str',
        'release': 'str',
        'version': 'str'
    }

    attribute_map = {
        'build_time': 'buildTime',
        'commit_id': 'commitId',
        'dsn': 'dsn',
        'environment': 'environment',
        'host_name': 'hostName',
        'name': 'name',
        'release': 'release',
        'version': 'version'
    }

    def __init__(self, build_time=None, commit_id=None, dsn=None, environment=None, host_name=None, name=None, release=None, version=None):  # noqa: E501
        """PlatformOverview - a model defined in Swagger"""  # noqa: E501
        self._build_time = None
        self._commit_id = None
        self._dsn = None
        self._environment = None
        self._host_name = None
        self._name = None
        self._release = None
        self._version = None
        self.discriminator = None
        if build_time is not None:
            self.build_time = build_time
        if commit_id is not None:
            self.commit_id = commit_id
        if dsn is not None:
            self.dsn = dsn
        if environment is not None:
            self.environment = environment
        if host_name is not None:
            self.host_name = host_name
        if name is not None:
            self.name = name
        if release is not None:
            self.release = release
        if version is not None:
            self.version = version

    @property
    def build_time(self):
        """Gets the build_time of this PlatformOverview.  # noqa: E501


        :return: The build_time of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """Sets the build_time of this PlatformOverview.


        :param build_time: The build_time of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._build_time = build_time

    @property
    def commit_id(self):
        """Gets the commit_id of this PlatformOverview.  # noqa: E501


        :return: The commit_id of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PlatformOverview.


        :param commit_id: The commit_id of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def dsn(self):
        """Gets the dsn of this PlatformOverview.  # noqa: E501


        :return: The dsn of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._dsn

    @dsn.setter
    def dsn(self, dsn):
        """Sets the dsn of this PlatformOverview.


        :param dsn: The dsn of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._dsn = dsn

    @property
    def environment(self):
        """Gets the environment of this PlatformOverview.  # noqa: E501


        :return: The environment of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PlatformOverview.


        :param environment: The environment of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def host_name(self):
        """Gets the host_name of this PlatformOverview.  # noqa: E501


        :return: The host_name of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this PlatformOverview.


        :param host_name: The host_name of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def name(self):
        """Gets the name of this PlatformOverview.  # noqa: E501


        :return: The name of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlatformOverview.


        :param name: The name of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def release(self):
        """Gets the release of this PlatformOverview.  # noqa: E501


        :return: The release of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this PlatformOverview.


        :param release: The release of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def version(self):
        """Gets the version of this PlatformOverview.  # noqa: E501


        :return: The version of this PlatformOverview.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PlatformOverview.


        :param version: The version of this PlatformOverview.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
