# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlatformUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activated': 'bool',
        'created_by': 'str',
        'created_on': 'Timestamp',
        'email': 'str',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'password_reset_date': 'Timestamp',
        'platform_admin': 'bool',
        'updated_by': 'str',
        'updated_on': 'Timestamp',
        'uuid': 'str'
    }

    attribute_map = {
        'activated': 'activated',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'email': 'email',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'password_reset_date': 'passwordResetDate',
        'platform_admin': 'platformAdmin',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'uuid': 'uuid'
    }

    def __init__(self, activated=None, created_by=None, created_on=None, email=None, first_name=None, id=None, last_name=None, password_reset_date=None, platform_admin=None, updated_by=None, updated_on=None, uuid=None):  # noqa: E501
        """PlatformUser - a model defined in Swagger"""  # noqa: E501
        self._activated = None
        self._created_by = None
        self._created_on = None
        self._email = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._password_reset_date = None
        self._platform_admin = None
        self._updated_by = None
        self._updated_on = None
        self._uuid = None
        self.discriminator = None
        if activated is not None:
            self.activated = activated
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if password_reset_date is not None:
            self.password_reset_date = password_reset_date
        if platform_admin is not None:
            self.platform_admin = platform_admin
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if uuid is not None:
            self.uuid = uuid

    @property
    def activated(self):
        """Gets the activated of this PlatformUser.  # noqa: E501


        :return: The activated of this PlatformUser.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this PlatformUser.


        :param activated: The activated of this PlatformUser.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def created_by(self):
        """Gets the created_by of this PlatformUser.  # noqa: E501


        :return: The created_by of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PlatformUser.


        :param created_by: The created_by of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this PlatformUser.  # noqa: E501


        :return: The created_on of this PlatformUser.  # noqa: E501
        :rtype: Timestamp
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PlatformUser.


        :param created_on: The created_on of this PlatformUser.  # noqa: E501
        :type: Timestamp
        """

        self._created_on = created_on

    @property
    def email(self):
        """Gets the email of this PlatformUser.  # noqa: E501


        :return: The email of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PlatformUser.


        :param email: The email of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this PlatformUser.  # noqa: E501


        :return: The first_name of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PlatformUser.


        :param first_name: The first_name of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this PlatformUser.  # noqa: E501


        :return: The id of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlatformUser.


        :param id: The id of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this PlatformUser.  # noqa: E501


        :return: The last_name of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PlatformUser.


        :param last_name: The last_name of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def password_reset_date(self):
        """Gets the password_reset_date of this PlatformUser.  # noqa: E501


        :return: The password_reset_date of this PlatformUser.  # noqa: E501
        :rtype: Timestamp
        """
        return self._password_reset_date

    @password_reset_date.setter
    def password_reset_date(self, password_reset_date):
        """Sets the password_reset_date of this PlatformUser.


        :param password_reset_date: The password_reset_date of this PlatformUser.  # noqa: E501
        :type: Timestamp
        """

        self._password_reset_date = password_reset_date

    @property
    def platform_admin(self):
        """Gets the platform_admin of this PlatformUser.  # noqa: E501


        :return: The platform_admin of this PlatformUser.  # noqa: E501
        :rtype: bool
        """
        return self._platform_admin

    @platform_admin.setter
    def platform_admin(self, platform_admin):
        """Sets the platform_admin of this PlatformUser.


        :param platform_admin: The platform_admin of this PlatformUser.  # noqa: E501
        :type: bool
        """

        self._platform_admin = platform_admin

    @property
    def updated_by(self):
        """Gets the updated_by of this PlatformUser.  # noqa: E501


        :return: The updated_by of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PlatformUser.


        :param updated_by: The updated_by of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this PlatformUser.  # noqa: E501


        :return: The updated_on of this PlatformUser.  # noqa: E501
        :rtype: Timestamp
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this PlatformUser.


        :param updated_on: The updated_on of this PlatformUser.  # noqa: E501
        :type: Timestamp
        """

        self._updated_on = updated_on

    @property
    def uuid(self):
        """Gets the uuid of this PlatformUser.  # noqa: E501


        :return: The uuid of this PlatformUser.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PlatformUser.


        :param uuid: The uuid of this PlatformUser.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
