# coding: utf-8

"""
    Kodexa

    Content Intelligence  # noqa: E501

    OpenAPI spec version: 2.0.132
    Contact: suppot@kodexa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudExecutionStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_service_reference': 'ContentServiceReference',
        'context': 'object',
        'document_references': 'list[CloudDocumentReference]',
        'end': 'datetime',
        'exception_details': 'ExceptionDetails',
        'file_references': 'list[CloudFileReference]',
        'id': 'str',
        'options': 'object',
        'processing_time': 'int',
        'start': 'datetime',
        'status': 'str',
        'stores': 'list[CloudStore]'
    }

    attribute_map = {
        'content_service_reference': 'contentServiceReference',
        'context': 'context',
        'document_references': 'documentReferences',
        'end': 'end',
        'exception_details': 'exceptionDetails',
        'file_references': 'fileReferences',
        'id': 'id',
        'options': 'options',
        'processing_time': 'processingTime',
        'start': 'start',
        'status': 'status',
        'stores': 'stores'
    }

    def __init__(self, content_service_reference=None, context=None, document_references=None, end=None, exception_details=None, file_references=None, id=None, options=None, processing_time=None, start=None, status=None, stores=None):  # noqa: E501
        """CloudExecutionStep - a model defined in Swagger"""  # noqa: E501
        self._content_service_reference = None
        self._context = None
        self._document_references = None
        self._end = None
        self._exception_details = None
        self._file_references = None
        self._id = None
        self._options = None
        self._processing_time = None
        self._start = None
        self._status = None
        self._stores = None
        self.discriminator = None
        if content_service_reference is not None:
            self.content_service_reference = content_service_reference
        if context is not None:
            self.context = context
        if document_references is not None:
            self.document_references = document_references
        if end is not None:
            self.end = end
        if exception_details is not None:
            self.exception_details = exception_details
        if file_references is not None:
            self.file_references = file_references
        if id is not None:
            self.id = id
        if options is not None:
            self.options = options
        if processing_time is not None:
            self.processing_time = processing_time
        if start is not None:
            self.start = start
        if status is not None:
            self.status = status
        if stores is not None:
            self.stores = stores

    @property
    def content_service_reference(self):
        """Gets the content_service_reference of this CloudExecutionStep.  # noqa: E501


        :return: The content_service_reference of this CloudExecutionStep.  # noqa: E501
        :rtype: ContentServiceReference
        """
        return self._content_service_reference

    @content_service_reference.setter
    def content_service_reference(self, content_service_reference):
        """Sets the content_service_reference of this CloudExecutionStep.


        :param content_service_reference: The content_service_reference of this CloudExecutionStep.  # noqa: E501
        :type: ContentServiceReference
        """

        self._content_service_reference = content_service_reference

    @property
    def context(self):
        """Gets the context of this CloudExecutionStep.  # noqa: E501


        :return: The context of this CloudExecutionStep.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CloudExecutionStep.


        :param context: The context of this CloudExecutionStep.  # noqa: E501
        :type: object
        """

        self._context = context

    @property
    def document_references(self):
        """Gets the document_references of this CloudExecutionStep.  # noqa: E501


        :return: The document_references of this CloudExecutionStep.  # noqa: E501
        :rtype: list[CloudDocumentReference]
        """
        return self._document_references

    @document_references.setter
    def document_references(self, document_references):
        """Sets the document_references of this CloudExecutionStep.


        :param document_references: The document_references of this CloudExecutionStep.  # noqa: E501
        :type: list[CloudDocumentReference]
        """

        self._document_references = document_references

    @property
    def end(self):
        """Gets the end of this CloudExecutionStep.  # noqa: E501


        :return: The end of this CloudExecutionStep.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CloudExecutionStep.


        :param end: The end of this CloudExecutionStep.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def exception_details(self):
        """Gets the exception_details of this CloudExecutionStep.  # noqa: E501


        :return: The exception_details of this CloudExecutionStep.  # noqa: E501
        :rtype: ExceptionDetails
        """
        return self._exception_details

    @exception_details.setter
    def exception_details(self, exception_details):
        """Sets the exception_details of this CloudExecutionStep.


        :param exception_details: The exception_details of this CloudExecutionStep.  # noqa: E501
        :type: ExceptionDetails
        """

        self._exception_details = exception_details

    @property
    def file_references(self):
        """Gets the file_references of this CloudExecutionStep.  # noqa: E501


        :return: The file_references of this CloudExecutionStep.  # noqa: E501
        :rtype: list[CloudFileReference]
        """
        return self._file_references

    @file_references.setter
    def file_references(self, file_references):
        """Sets the file_references of this CloudExecutionStep.


        :param file_references: The file_references of this CloudExecutionStep.  # noqa: E501
        :type: list[CloudFileReference]
        """

        self._file_references = file_references

    @property
    def id(self):
        """Gets the id of this CloudExecutionStep.  # noqa: E501


        :return: The id of this CloudExecutionStep.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudExecutionStep.


        :param id: The id of this CloudExecutionStep.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def options(self):
        """Gets the options of this CloudExecutionStep.  # noqa: E501


        :return: The options of this CloudExecutionStep.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CloudExecutionStep.


        :param options: The options of this CloudExecutionStep.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def processing_time(self):
        """Gets the processing_time of this CloudExecutionStep.  # noqa: E501


        :return: The processing_time of this CloudExecutionStep.  # noqa: E501
        :rtype: int
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this CloudExecutionStep.


        :param processing_time: The processing_time of this CloudExecutionStep.  # noqa: E501
        :type: int
        """

        self._processing_time = processing_time

    @property
    def start(self):
        """Gets the start of this CloudExecutionStep.  # noqa: E501


        :return: The start of this CloudExecutionStep.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CloudExecutionStep.


        :param start: The start of this CloudExecutionStep.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this CloudExecutionStep.  # noqa: E501


        :return: The status of this CloudExecutionStep.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloudExecutionStep.


        :param status: The status of this CloudExecutionStep.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "REQUESTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stores(self):
        """Gets the stores of this CloudExecutionStep.  # noqa: E501


        :return: The stores of this CloudExecutionStep.  # noqa: E501
        :rtype: list[CloudStore]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this CloudExecutionStep.


        :param stores: The stores of this CloudExecutionStep.  # noqa: E501
        :type: list[CloudStore]
        """

        self._stores = stores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudExecutionStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudExecutionStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
