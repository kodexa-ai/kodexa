openapi: 3.0.1
info:
  title: Kodexa
  description: Rethink how you work with documents
  license:
    name: Commercial
    url: https://kodexa.ai
  version: "${git.build.version}"
externalDocs:
  description: Kodexa Developer Portal
  url: https://developer.kodexa.com
servers:
  - url: http://localhost
    description: Generated server url
tags:
  - name: Teams
    description: Provides ability to interact with the teams on the platform
  - name: Assistants
    description: Provides ability to interact with the assistants that have been registered
  - name: ModelRuntimes
    description: Provides ability to interact with the model runtimes that have been
      registered
  - name: Pipelines
    description: Provides ability to interact with the pipelines registered with the
      platform
  - name: Roles
    description: Provides ability to interact with the roles on the platform
  - name: Sessions
    description: Provides ability to interact with the active sessions and executions
  - name: Dashboards
    description: Provides ability to interact with the dashboards that have been registered
  - name: Memberships
    description: Provides ability to interact with the organization memberships
  - name: Taxonomies
    description: Provides ability to interact with the taxonomies created on the platform
  - name: Actions
    description: Provides ability to interact with the actions that have been registered
  - name: Projects
    description: Provides ability to interact with the projects on the platform
  - name: Account
    description: Provides ability to work with your account
  - name: Extension Packs
    description: Provides ability to interact with the extension packs that have been
      registered
  - name: Organizations
    description: Provides ability to interact with the organizations
  - name: Project Templates
    description: Provides ability to interact with the project templates registered
      on the platform
  - name: Executions
    description: Provides ability to search and interact with executions
  - name: Labels
    description: Provides ability to interact with the labels on the platform
  - name: Platform Events
    description: Provides ability to interact with the events from the platform
  - name: Stores
    description: Provides ability to interact with the stores created on the platform
  - name: Platform Overview
    description: Provides details on the currently running instance.
  - name: Users
    description: Provides ability to interact with the users registered on the platform
  - name: Access Tokens
    description: Provides ability to work with access tokens
  - name: Credentials
    description: Provides ability to capture and store types of credential
paths:
  /api/users/{id}:
    get:
      tags:
        - Users
      description: Get a resource with the provided ID
      operationId: get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      description: Update the given instance
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users
      description: Delete the resource with the provided ID
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/users/{id}/password:
    put:
      tags:
        - Users
      description: Update users password (admin only)
      operationId: setPassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePasswordReset'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{id}/deactivate:
    put:
      tags:
        - Users
      description: De-activate user (admin only)
      operationId: deactivate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{id}/activate:
    put:
      tags:
        - Users
      description: Activate user (admin only)
      operationId: activate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/teams/{id}:
    get:
      tags:
        - Teams
      description: Get a resource with the provided ID
      operationId: getTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
    put:
      tags:
        - Teams
      description: Update the given instance
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags:
        - Teams
      description: Delete the resource with the provided ID
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/taxonomies/{organizationSlug}/{slug}:
    get:
      tags:
        - Taxonomies
      description: Get the current version of the object with given slug
      operationId: getTaxonomy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Taxonomy'
    put:
      tags:
        - Taxonomies
      description: Update the current version object with given slug in the organization
      operationId: updateTaxonomy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Taxonomy'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Taxonomy'
    delete:
      tags:
        - Taxonomies
      description: Delete the current version of the given object
      operationId: deleteTaxonomy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/taxonomies/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Taxonomies
      description: Get the specific version of the object with given slug
      operationId: getVersion
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Taxonomy'
    put:
      tags:
        - Taxonomies
      description: Update the object with given slug and version in the organization
      operationId: updateVersion
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Taxonomy'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Taxonomy'
    delete:
      tags:
        - Taxonomies
      description: Delete the specified version of the given object
      operationId: deleteVersion
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{organizationSlug}/{slug}:
    get:
      tags:
        - Stores
      description: Get the current version of the object with given slug
      operationId: getStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Store'
    put:
      tags:
        - Stores
      description: Update the current version object with given slug in the organization
      operationId: updateStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Store'
    delete:
      tags:
        - Stores
      description: Delete the current version of the given object
      operationId: deleteStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Stores
      description: Get the specific version of the object with given slug
      operationId: getVersionStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Store'
    put:
      tags:
        - Stores
      description: Update the object with given slug and version in the organization
      operationId: updateVersionStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Store'
    delete:
      tags:
        - Stores
      description: Delete the specified version of the given object
      operationId: deleteVersionStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/{version}/viewOptions:
    put:
      tags:
        - Stores
      description: "Reprocess content in the store, allow you to provide a list of\
        \ the family ID's"
      operationId: updateStoreViewOptions
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreViewOptions'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/undeploy:
    put:
      tags:
        - Stores
      description: Undeploy Model
      operationId: undeployStore
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/{version}/reprocessAssistants:
    put:
      tags:
        - Stores
      description: "Reprocess content in the store, allow you to provide a list of\
        \ the family ID's"
      operationId: reprocessAssistantsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprocessRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/metadata:
    get:
      tags:
        - Stores
      description: Get the metadata associated with this store
      operationId: getStoreMetadata
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DocumentContentMetadata'
                  - $ref: '#/components/schemas/ModelContentMetadata'
    put:
      tags:
        - Stores
      description: Update the content metadata for this store
      operationId: updateStoreMetadata
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DocumentContentMetadata'
                - $ref: '#/components/schemas/ModelContentMetadata'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DocumentContentMetadata'
                  - $ref: '#/components/schemas/ModelContentMetadata'
  /api/stores/{orgSlug}/{slug}/{version}/fs/**:
    get:
      tags:
        - Stores
      description: Get the document family for a path in the specific version of the
        store
      operationId: getContentByVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: path
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      tags:
        - Stores
      description: Rename the path of a document family in the current version of
        the store
      operationId: renameFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
        - name: rename
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    post:
      tags:
        - Stores
      operationId: uploadToPathWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
        - name: documentVersion
          in: query
          required: false
          schema:
            type: string
            default: ""
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                document:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    delete:
      tags:
        - Stores
      description: Delete document family by path in a specific version of the store
      operationId: deleteFamilyByPathWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/{version}/families:
    get:
      tags:
        - Stores
      description: "List (with pagination) the enriched (include transition events,\
        \ and extracted data counts) document families in a specific version of the\
        \ store"
      operationId: listFamiliesWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDocumentFamily'
    put:
      tags:
        - Stores
      description: Bulk set the lock on a list of document families
      operationId: bulkSetLockWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCopy'
        required: true
      responses:
        "200":
          description: OK
    post:
      tags:
        - Stores
      operationId: importFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                familyZip:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    delete:
      tags:
        - Stores
      description: Bulk delete a set of document families the specified version
      operationId: deleteContentObjectsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDelete'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}:
    get:
      tags:
        - Stores
      description: Get a specific document family in a version of the store
      operationId: getFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    put:
      tags:
        - Stores
      description: Get a specific document family in the current version of the store
      operationId: updateFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRename'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    delete:
      tags:
        - Stores
      description: Delete a specific document family in a version of a store
      operationId: deleteFamilyIDWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/status:
    put:
      tags:
        - Stores
      description: "Get the counts of extracted data, by parent taxon, for a specific\
        \ family"
      operationId: updateStatusWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentStatus'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/reprocessAssistants:
    put:
      tags:
        - Stores
      description: Reprocess content in this family for a specific set of assistants
        in a version of a store
      operationId: reprocessAssistantsForFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/content:
    put:
      tags:
        - Stores
      description: Update the contents of an object in a family (note that this will
        overwrite any content and not store a transition)
      operationId: updateContentObjectInFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/_replaceTags:
    put:
      tags:
        - Stores
      description: Update the contents of an object in a family (note that this will
        overwrite any content and not store a transition)
      operationId: updateTagsOnContentObject
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureSet'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/assignees:
    put:
      tags:
        - Stores
      description: "Get the counts of extracted data, by parent taxon, for a specific\
        \ family"
      operationId: updateAssigneesWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/DocumentAssignment'
  /api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/unlock:
    put:
      tags:
        - Stores
      description: Unlock the given family in the current version of the store
      operationId: unlockFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: familyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/lock:
    put:
      tags:
        - Stores
      description: Lock the given family in the given version of the store
      operationId: lockFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: familyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/deploy:
    put:
      tags:
        - Stores
      description: Deploy Model (only works if the store is a model store and it is
        in a suitable state)
      operationId: deployStore
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/{version}/dataObjects/{parentId}/attributes/{attributeId}:
    put:
      tags:
        - Stores
      description: Update a specific attribute in a data object
      operationId: updateWithVersionDataObjectAttribute
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
        - name: attributeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataAttribute'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataObject'
    delete:
      tags:
        - Stores
      description: Delete a specific attribute in a data object
      operationId: removeAttributeFromDataObject
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
        - name: attributeId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataObject'
  /api/stores/{orgSlug}/{slug}/{version}/dataObjects/{dataObjectId}:
    put:
      tags:
        - Stores
      description: Update a given dataObject
      operationId: updateDataObjectWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: dataObjectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataObject'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataObject'
    delete:
      tags:
        - Stores
      description: Delete a given data object
      operationId: deleteDataObjectWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: dataObjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/reprocessAssistants:
    put:
      tags:
        - Stores
      description: "Reprocess content in the store, allow you to provide a list of\
        \ the family ID's"
      operationId: reprocessAssistants
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprocessRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/fs/**:
    get:
      tags:
        - Stores
      description: Get the document family for a path in the current version of the
        store
      operationId: getContent
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: path
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      tags:
        - Stores
      operationId: renameFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
        - name: rename
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    post:
      tags:
        - Stores
      operationId: uploadToPath
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
        - name: documentVersion
          in: query
          required: false
          schema:
            type: string
            default: ""
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                document:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    delete:
      tags:
        - Stores
      description: Delete document family by path in the current version of the store
      operationId: deleteFamilyByPath
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/families:
    get:
      tags:
        - Stores
      description: List (with pagination) the document families in the current version
        of the store
      operationId: listFamilies
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDocumentFamily'
    put:
      tags:
        - Stores
      description: Bulk set the lock on a list of document families
      operationId: bulkSetLock
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCopy'
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
        - Stores
      description: Bulk delete a set of document families in the current version
      operationId: deleteFamilies
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDelete'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/families/{id}:
    get:
      tags:
        - Stores
      description: Get a specific document family in the current version of the store
      operationId: getFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    put:
      tags:
        - Stores
      description: Get a specific document family in the current version of the store
      operationId: updateFamilyPath
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRename'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DocumentFamily'
    delete:
      tags:
        - Stores
      description: Delete a specific document family in the current version of a store
      operationId: deleteFamilyByID
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/stores/{orgSlug}/{slug}/families/{id}/reprocessAssistants:
    put:
      tags:
        - Stores
      description: Reprocess content in this family for a specific set of assistants
        in the current version of a store
      operationId: reprocessAssistantsForFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/families/{familyId}/unlock:
    put:
      tags:
        - Stores
      description: Unlock the given family in the current version of the store
      operationId: unlockFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: familyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/families/{familyId}/lock:
    put:
      tags:
        - Stores
      description: Lock the given family in the current version of the store
      operationId: lockFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: familyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/dataObjects/{parentId}/attributes/{attributeId}:
    put:
      tags:
        - Stores
      description: Updte a specific attribute in a data object
      operationId: updateDataObjectAttribute
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
        - name: attributeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataAttribute'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataObject'
  /api/stores/{orgSlug}/{slug}/dataObjects/{dataObjectId}:
    put:
      tags:
        - Stores
      description: Update a given dataObject in the latest version of the store
      operationId: updateDataObject
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: dataObjectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataObject'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataObject'
    delete:
      tags:
        - Stores
      description: Delete a given data object
      operationId: deleteDataObject
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: dataObjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/roles/{id}:
    get:
      tags:
        - Roles
      description: Get a resource with the provided ID
      operationId: getPlatformRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
        - Roles
      description: Update the given instance
      operationId: updatePlatformRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
        - Roles
      description: Delete the resource with the provided ID
      operationId: deletePlatformRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/projects/{id}:
    get:
      tags:
        - Projects
      description: Get a resource with the provided ID
      operationId: getProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
    put:
      tags:
        - Projects
      description: Update the given instance
      operationId: updateProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
    delete:
      tags:
        - Projects
      description: Delete the project with the provided ID and its associated resources
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: deleteAssociated
          in: query
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to view the resource
        "200":
          description: Successfully deleted the resource
  /api/projects/{id}/resources:
    put:
      tags:
        - Projects
      description: Update all the resources associated with this project
      operationId: updateResources
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectResourcesUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectResourcesUpdate'
  /api/projects/{id}/assistants:
    get:
      tags:
        - Projects
      description: Paginated list of assistants that have been added to this project
      operationId: getAssistants
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAssistant'
    put:
      tags:
        - Projects
      description: Update the assistant in the given project
      operationId: updateAssistant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assistant'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Assistant'
    post:
      tags:
        - Projects
      description: Create and add assistant to project
      operationId: addAssistant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assistant'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Assistant'
  /api/projects/{id}/assistants/{assistantId}/stores:
    get:
      tags:
        - Projects
      description: Delete specified assistant
      operationId: getAssistantStores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    put:
      tags:
        - Projects
      description: Update the list of stores for an assistant
      operationId: updateAssistantStores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
  /api/projects/{id}/assistants/{assistantId}/deactivate:
    put:
      tags:
        - Projects
      description: Deactivate the assistant (stopping it from getting content events)
      operationId: deactivateAssistant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/projects/{id}/assistants/{assistantId}/activate:
    put:
      tags:
        - Projects
      description: Activate the assistant (ensuring it gets content events)
      operationId: activateAssistant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/projectTemplates/{organizationSlug}/{slug}:
    get:
      tags:
        - Project Templates
      description: Get the current version of the object with given slug
      operationId: getProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectTemplate'
    put:
      tags:
        - Project Templates
      description: Update the current version object with given slug in the organization
      operationId: updateProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectTemplate'
    delete:
      tags:
        - Project Templates
      description: Delete the current version of the given object
      operationId: deleteProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/projectTemplates/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Project Templates
      description: Get the specific version of the object with given slug
      operationId: getVersionProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectTemplate'
    put:
      tags:
        - Project Templates
      description: Update the object with given slug and version in the organization
      operationId: updateVersionProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectTemplate'
    delete:
      tags:
        - Project Templates
      description: Delete the specified version of the given object
      operationId: deleteVersionProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/pipelines/{organizationSlug}/{slug}:
    get:
      tags:
        - Pipelines
      description: Get the current version of the object with given slug
      operationId: getPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pipeline'
    put:
      tags:
        - Pipelines
      description: Update the current version object with given slug in the organization
      operationId: updatePipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pipeline'
    delete:
      tags:
        - Pipelines
      description: Delete the current version of the given object
      operationId: deletePipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/pipelines/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Pipelines
      description: Get the specific version of the object with given slug
      operationId: getVersionPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pipeline'
    put:
      tags:
        - Pipelines
      description: Update the object with given slug and version in the organization
      operationId: updateVersionPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pipeline'
    delete:
      tags:
        - Pipelines
      description: Delete the specified version of the given object
      operationId: deleteVersionPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/organizations/{id}:
    get:
      tags:
        - Organizations
      description: Get a resource with the provided ID
      operationId: getOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      tags:
        - Organizations
      description: Update the given instance
      operationId: updateOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags:
        - Organizations
      description: Delete the resource with the provided ID
      operationId: deleteOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/modelRuntimes/{organizationSlug}/{slug}:
    get:
      tags:
        - ModelRuntimes
      description: Get the current version of the object with given slug
      operationId: getModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelRuntime'
    put:
      tags:
        - ModelRuntimes
      description: Update the current version object with given slug in the organization
      operationId: updateModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRuntime'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelRuntime'
    delete:
      tags:
        - ModelRuntimes
      description: Delete the current version of the given object
      operationId: deleteModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/modelRuntimes/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - ModelRuntimes
      description: Get the specific version of the object with given slug
      operationId: getVersionModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelRuntime'
    put:
      tags:
        - ModelRuntimes
      description: Update the object with given slug and version in the organization
      operationId: updateVersionModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRuntime'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelRuntime'
    delete:
      tags:
        - ModelRuntimes
      description: Delete the specified version of the given object
      operationId: deleteVersionModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/memberships/{id}:
    get:
      tags:
        - Memberships
      description: Get a resource with the provided ID
      operationId: getMembership
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
    put:
      tags:
        - Memberships
      description: Update the given instance
      operationId: updateMembership
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
    delete:
      tags:
        - Memberships
      description: Delete the resource with the provided ID
      operationId: deleteMembership
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/labels/{id}:
    get:
      tags:
        - Labels
      description: Get a resource with the provided ID
      operationId: getLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
    put:
      tags:
        - Labels
      description: Update the given instance
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
    delete:
      tags:
        - Labels
      description: Delete the resource with the provided ID
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/extensionPacks/{organizationSlug}/{slug}:
    get:
      tags:
        - Extension Packs
      description: Get the current version of the object with given slug
      operationId: getExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
    put:
      tags:
        - Extension Packs
      description: Update the current version object with given slug in the organization
      operationId: updateExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionPack'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
    delete:
      tags:
        - Extension Packs
      description: Delete the current version of the given object
      operationId: deleteExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/extensionPacks/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Extension Packs
      description: Get the specific version of the object with given slug
      operationId: getVersionExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
    put:
      tags:
        - Extension Packs
      description: Update the object with given slug and version in the organization
      operationId: updateVersionExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionPack'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
    delete:
      tags:
        - Extension Packs
      description: Delete the specified version of the given object
      operationId: deleteVersionExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/extensionPacks/{organizationSlug}/{slug}/{version}/_undeploy:
    put:
      tags:
        - Extension Packs
      description: Undeploy the extension pack
      operationId: undeploy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
  /api/extensionPacks/{organizationSlug}/{slug}/{version}/_repack:
    put:
      tags:
        - Extension Packs
      description: "Repack (re-download, build and deploy) the given extension pack"
      operationId: repack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
  /api/extensionPacks/{organizationSlug}/{slug}/{version}/_queueDetail:
    put:
      tags:
        - Extension Packs
      description: Purge the work queue for this extension pack
      operationId: getQueueDetails
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueDetail'
  /api/extensionPacks/{organizationSlug}/{slug}/{version}/_purgeQueue:
    put:
      tags:
        - Extension Packs
      description: Purge the work queue for this extension pack
      operationId: purgeQueue
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
  /api/extensionPacks/{organizationSlug}/{slug}/{version}/_deploy:
    put:
      tags:
        - Extension Packs
      description: Deploy the specified version of the extension pack
      operationId: deploy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
  /api/dashboards/{organizationSlug}/{slug}:
    get:
      tags:
        - Dashboards
      description: Get the current version of the object with given slug
      operationId: getDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Dashboard'
    put:
      tags:
        - Dashboards
      description: Update the current version object with given slug in the organization
      operationId: updateDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Dashboard'
    delete:
      tags:
        - Dashboards
      description: Delete the current version of the given object
      operationId: deleteDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/dashboards/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Dashboards
      description: Get the specific version of the object with given slug
      operationId: getVersionDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Dashboard'
    put:
      tags:
        - Dashboards
      description: Update the object with given slug and version in the organization
      operationId: updateVersionDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Dashboard'
    delete:
      tags:
        - Dashboards
      description: Delete the specified version of the given object
      operationId: deleteVersionDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/credentials/{organizationSlug}/{slug}:
    get:
      tags:
        - Credentials
      description: Get the current version of the object with given slug
      operationId: getCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Credential'
    put:
      tags:
        - Credentials
      description: Update the current version object with given slug in the organization
      operationId: updateCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Credential'
    delete:
      tags:
        - Credentials
      description: Delete the current version of the given object
      operationId: deleteCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/credentials/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Credentials
      description: Get the specific version of the object with given slug
      operationId: getVersionCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Credential'
    put:
      tags:
        - Credentials
      description: Update the object with given slug and version in the organization
      operationId: updateVersionCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Credential'
    delete:
      tags:
        - Credentials
      description: Delete the specified version of the given object
      operationId: deleteVersionCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/configuration:
    get:
      tags:
        - Platform Overview
      description: Get the configuration information for this instance
      operationId: getConfiguration
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlatformConfiguration'
    put:
      tags:
        - Platform Overview
      description: Update the configuration information for this instance
      operationId: updateConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformConfiguration'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlatformConfiguration'
  /api/assistants/{organizationSlug}/{slug}:
    get:
      tags:
        - Assistants
      description: Get the current version of the object with given slug
      operationId: getAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AssistantDefinition'
    put:
      tags:
        - Assistants
      description: Update the current version object with given slug in the organization
      operationId: updateAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantDefinition'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AssistantDefinition'
    delete:
      tags:
        - Assistants
      description: Delete the current version of the given object
      operationId: deleteAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/assistants/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Assistants
      description: Get the specific version of the object with given slug
      operationId: getVersionAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AssistantDefinition'
    put:
      tags:
        - Assistants
      description: Update the object with given slug and version in the organization
      operationId: updateVersionAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantDefinition'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AssistantDefinition'
    delete:
      tags:
        - Assistants
      description: Delete the specified version of the given object
      operationId: deleteVersionAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/actions/{organizationSlug}/{slug}:
    get:
      tags:
        - Actions
      description: Get the current version of the object with given slug
      operationId: getAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Action'
    put:
      tags:
        - Actions
      description: Update the current version object with given slug in the organization
      operationId: updateAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Action'
    delete:
      tags:
        - Actions
      description: Delete the current version of the given object
      operationId: deleteAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/actions/{organizationSlug}/{slug}/{version}:
    get:
      tags:
        - Actions
      description: Get the specific version of the object with given slug
      operationId: getVersionAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Action'
    put:
      tags:
        - Actions
      description: Update the object with given slug and version in the organization
      operationId: updateVersionAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Action'
    delete:
      tags:
        - Actions
      description: Delete the specified version of the given object
      operationId: deleteVersionAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/account/me:
    get:
      tags:
        - Account
      description: Get my user profile information
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Account
      description: Update my profile information
      operationId: updateMe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/account/me/token:
    get:
      tags:
        - Account
      description: Get personal access token
      operationId: getMyPAT
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - Account
      description: Regenerate personal access token
      operationId: regenerateMyPAT
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/account/activation/{activationToken}:
    get:
      tags:
        - Account
      description: Create an activation for token
      operationId: getActivation
      parameters:
        - name: activationToken
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserActivation'
    put:
      tags:
        - Account
      description: Activate user
      operationId: activateUser
      parameters:
        - name: activationToken
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivation'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserActivation'
  /api/accessTokens/{id}:
    get:
      tags:
        - Access Tokens
      description: Get a resource with the provided ID
      operationId: getAccessToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "401":
          description: You are not authorized to get the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "200":
          description: Successfully got the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
    put:
      tags:
        - Access Tokens
      description: Update the given instance
      operationId: updateAccessToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessToken'
        required: true
      responses:
        "200":
          description: Successfully updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "401":
          description: You are not authorized to updated the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
    delete:
      tags:
        - Access Tokens
      description: Delete the resource with the provided ID
      operationId: deleteAccessToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
        "404":
          description: The resource you were trying to reach not found
        "401":
          description: You are not authorized to delete the resource
        "200":
          description: Successfully deleted the resource
  /api/users:
    get:
      tags:
        - Users
      description: List a page of the resources
      operationId: list
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
    post:
      tags:
        - Users
      description: Create a new instance of the resource
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/_reindex:
    post:
      tags:
        - Users
      description: Re-index the resource
      operationId: reindex
      responses:
        "200":
          description: OK
  /api/teams:
    get:
      tags:
        - Teams
      description: List a page of the resources
      operationId: listTeam
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTeam'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTeam'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTeam'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTeam'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTeam'
    post:
      tags:
        - Teams
      description: Create a new instance of the resource
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Team'
  /api/teams/_reindex:
    post:
      tags:
        - Teams
      description: Re-index the resource
      operationId: reindexTeam
      responses:
        "200":
          description: OK
  /api/taxonomies/{organizationSlug}:
    get:
      tags:
        - Taxonomies
      description: Get a paginated list of the objects for an organization
      operationId: listTaxonomy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTaxonomy'
    post:
      tags:
        - Taxonomies
      description: Create a new instance of the object in the organization
      operationId: createTaxonomy
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Taxonomy'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Taxonomy'
  /api/stores/{organizationSlug}:
    get:
      tags:
        - Stores
      description: Get a paginated list of the objects for an organization
      operationId: listStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageStore'
    post:
      tags:
        - Stores
      description: Create a new instance of the object in the organization
      operationId: createStore
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Store'
  /api/stores/{orgSlug}/{slug}/{version}/train:
    post:
      tags:
        - Stores
      description: Train this model
      operationId: trainModelByVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelTrainRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/searchContents:
    get:
      tags:
        - Stores
      description: Perform a search on a specific document family
      operationId: searchFamilyWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchContent'
    post:
      tags:
        - Stores
      description: Replace the searchable contents for a given document
      operationId: updateSearchContentsForFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SearchContent'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects:
    post:
      tags:
        - Stores
      description: Add a new content object to the family
      operationId: createContentObjectWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: transitionType
          in: query
          required: true
          schema:
            type: string
        - name: document
          in: query
          required: true
          schema:
            type: boolean
        - name: sourceContentObjectId
          in: query
          required: true
          schema:
            type: string
        - name: documentVersion
          in: query
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContentObject'
  /api/stores/{orgSlug}/{slug}/{version}/dataObjects:
    get:
      tags:
        - Stores
      description: Get the paginated dataObjects from a specific version of the store
      operationId: getDataObjectsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDataObject'
    post:
      tags:
        - Stores
      description: Add a list of dataObjects to a specific version of the store (import
        mode)
      operationId: createDataObjectsForVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataObject'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataObject'
    delete:
      tags:
        - Stores
      description: Delete the dataObjects from a specific version of the store
      operationId: deleteDataObjectsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{version}/dataObjects/{parentId}/attributes:
    post:
      tags:
        - Stores
      description: Create a specific attribute in a data object
      operationId: createDataObjectAttribute
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataAttribute'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataAttribute'
  /api/stores/{orgSlug}/{slug}/{version}/_reindex:
    post:
      tags:
        - Stores
      description: Reindex documents or data in specified version of the store
      operationId: reindexContentObjectsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/{documentFamilyId}/objects:
    post:
      tags:
        - Stores
      operationId: addContentObjectToFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: document
          in: query
          required: false
          schema:
            type: boolean
        - name: transitionType
          in: query
          required: true
          schema:
            type: string
        - name: sourceContentObjectId
          in: query
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: documentVersion
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContentObject'
  /api/stores/{orgSlug}/{slug}/train:
    post:
      tags:
        - Stores
      description: Train this Model
      operationId: trainModel
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelTrainRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/dataObjects:
    get:
      tags:
        - Stores
      description: Get the paginated dataObjects from the current version of the store
      operationId: getDataObjects
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDataObject'
    post:
      tags:
        - Stores
      description: Add dataObjects to the the current version of the store
      operationId: createDataObjects
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataObject'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataObject'
    delete:
      tags:
        - Stores
      description: Delete the dataObjects from the current version of the store
      operationId: deleteDataObjects
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/stores/{orgSlug}/{slug}/_reindex:
    post:
      tags:
        - Stores
      description: Reindex  documents or data families in current version of the store
      operationId: reindexContentObjects
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/sessions/{sessionId}/executions/{executionId}/stores/{storeId}:
    get:
      tags:
        - Sessions
      description: Get the data and structure of a session store
      operationId: getExecutionStore
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: storeId
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStore'
    post:
      tags:
        - Sessions
      description: Update a execution-based store content
      operationId: updateExecutionStore
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: storeId
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionStore'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStore'
  /api/sessions/{sessionId}/executions/{executionId}/status:
    post:
      tags:
        - Sessions
      description: Update the status details on an execution
      operationId: updateStatus
      parameters:
        - name: x-access-token
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionStatusUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Execution'
  /api/sessions/{sessionId}/executions/{executionId}/objects:
    post:
      tags:
        - Sessions
      description: Upload a new content object to the execution
      operationId: uploadContentObject
      parameters:
        - name: x-access-token
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: contentObjectJson
          in: query
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContentObject'
  /api/sessions/{sessionId}/events:
    post:
      tags:
        - Sessions
      description: "Pass, and process, a new event in the session"
      operationId: processEvent
      parameters:
        - name: x-access-token
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionEvent'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Execution'
  /api/sessions/{id}/executions/{executionId}/logs:
    get:
      tags:
        - Sessions
      description: Get logs for the specified execution in the session
      operationId: getExecutionLogs
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/ExecutionLogEntry'
    post:
      tags:
        - Sessions
      description: Add log entries to an execution
      operationId: addLogEntriesToExecution
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ExecutionLogEntry'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Execution'
  /api/roles:
    get:
      tags:
        - Roles
      description: List a page of the resources
      operationId: listPlatformRole
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRole'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRole'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRole'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRole'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRole'
    post:
      tags:
        - Roles
      description: Create a new instance of the resource
      operationId: createPlatformRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
  /api/roles/_reindex:
    post:
      tags:
        - Roles
      description: Re-index the resource
      operationId: reindexPlatformRole
      responses:
        "200":
          description: OK
  /api/projects:
    get:
      tags:
        - Projects
      description: List a page of the resources
      operationId: listProject
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProject'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProject'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProject'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProject'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProject'
    post:
      tags:
        - Projects
      description: Create a new project based on the template referenced
      operationId: createProject
      parameters:
        - name: templateRef
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
  /api/projects/{id}/taxonomies:
    post:
      tags:
        - Projects
      description: Add a taxonomy to the project
      operationId: addTaxonomyToProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Taxonomy'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
  /api/projects/{id}/stores:
    post:
      tags:
        - Projects
      description: Add a store to the project
      operationId: addStoreToProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
  /api/projects/{id}/assistants/{assistantId}/events:
    get:
      tags:
        - Projects
      description: Paginated list of assistant events
      operationId: getAssistantEvents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePlatformEvent'
    post:
      tags:
        - Projects
      description: Send a document to upload and send as an event to an assistant
      operationId: processAssistantEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
        - name: eventType
          in: query
          required: false
          schema:
            type: string
        - name: options
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
  /api/projects/_reindex:
    post:
      tags:
        - Projects
      description: Re-index the projects
      operationId: reindexProject
      responses:
        "200":
          description: OK
  /api/projectTemplates/{organizationSlug}:
    get:
      tags:
        - Project Templates
      description: Get a paginated list of the objects for an organization
      operationId: listProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectTemplate'
    post:
      tags:
        - Project Templates
      description: Create a new instance of the object in the organization
      operationId: createProjectTemplate
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectTemplate'
  /api/pipelines/{organizationSlug}:
    get:
      tags:
        - Pipelines
      description: Get a paginated list of the objects for an organization
      operationId: listPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePipeline'
    post:
      tags:
        - Pipelines
      description: Create a new instance of the object in the organization
      operationId: createPipeline
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pipeline'
  /api/organizations:
    get:
      tags:
        - Organizations
      description: List a page of the resources
      operationId: listOrganization
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganization'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganization'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganization'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganization'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganization'
    post:
      tags:
        - Organizations
      description: Create a new instance of the resource
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
  /api/organizations/_reindex:
    post:
      tags:
        - Organizations
      description: Re-index the resource
      operationId: reindexOrganization
      responses:
        "200":
          description: OK
  /api/modelRuntimes/{organizationSlug}:
    get:
      tags:
        - ModelRuntimes
      description: Get a paginated list of the objects for an organization
      operationId: listModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageModelRuntime'
    post:
      tags:
        - ModelRuntimes
      description: Create a new instance of the object in the organization
      operationId: createModelRuntime
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRuntime'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelRuntime'
  /api/memberships:
    get:
      tags:
        - Memberships
      description: List a page of the resources
      operationId: listMembership
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMembership'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMembership'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMembership'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMembership'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMembership'
    post:
      tags:
        - Memberships
      description: Create a new instance of the resource
      operationId: createMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Membership'
  /api/memberships/_reindex:
    post:
      tags:
        - Memberships
      description: Re-index the resource
      operationId: reindexMembership
      responses:
        "200":
          description: OK
  /api/labels:
    get:
      tags:
        - Labels
      description: List a page of the resources
      operationId: listLabel
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLabel'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLabel'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLabel'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLabel'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLabel'
    post:
      tags:
        - Labels
      description: Create a new instance of the resource
      operationId: createLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Label'
  /api/labels/_reindex:
    post:
      tags:
        - Labels
      description: Re-index the labels
      operationId: reindexLabel
      responses:
        "200":
          description: OK
  /api/extensionPacks/{organizationSlug}:
    get:
      tags:
        - Extension Packs
      description: Get a paginated list of the objects for an organization
      operationId: listExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExtensionPack'
    post:
      tags:
        - Extension Packs
      description: "Create, buid and deploy extension pack from specific URI"
      operationId: createExtensionPack
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: uri
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExtensionPack'
  /api/events/_reindex:
    post:
      tags:
        - Platform Events
      operationId: reindexPlatformEvent
      responses:
        "200":
          description: OK
  /api/dashboards/{organizationSlug}:
    get:
      tags:
        - Dashboards
      description: Get a paginated list of the objects for an organization
      operationId: listDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDashboard'
    post:
      tags:
        - Dashboards
      description: Create a new instance of the object in the organization
      operationId: createDashboard
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Dashboard'
  /api/credentials/{organizationSlug}:
    get:
      tags:
        - Credentials
      description: Get a paginated list of the objects for an organization
      operationId: listCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCredential'
    post:
      tags:
        - Credentials
      description: Create a new instance of the object in the organization
      operationId: createCredential
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Credential'
  /api/assistants/{organizationSlug}:
    get:
      tags:
        - Assistants
      description: Get a paginated list of the objects for an organization
      operationId: listAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAssistantDefinition'
    post:
      tags:
        - Assistants
      description: Create a new instance of the object in the organization
      operationId: createAssistantDefinition
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantDefinition'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AssistantDefinition'
  /api/actions/{organizationSlug}:
    get:
      tags:
        - Actions
      description: Get a paginated list of the objects for an organization
      operationId: listAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: includePublic
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAction'
    post:
      tags:
        - Actions
      description: Create a new instance of the object in the organization
      operationId: createAction
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Action'
  /api/account/signin:
    post:
      tags:
        - Account
      description: Sign-in (JWT)
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/account/register:
    post:
      tags:
        - Account
      description: Register for platform
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/account/refreshToken:
    post:
      tags:
        - Account
      description: Refresh JWT Token
      operationId: refreshJwtToken
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/account/passwordReset:
    post:
      tags:
        - Account
      description: Start password reset
      operationId: passwordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/account/passwordChange:
    post:
      tags:
        - Account
      description: Change my password
      operationId: passwordChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/account/me/documentationToken:
    post:
      tags:
        - Account
      operationId: redirectWithRedirectAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/account/completePasswordReset:
    post:
      tags:
        - Account
      description: Complete password reset
      operationId: completePasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePasswordReset'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/accessTokens:
    get:
      tags:
        - Access Tokens
      description: List a page of the resources
      operationId: listAccessToken
      parameters:
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessToken'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessToken'
        "401":
          description: You are not authorized to list the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessToken'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessToken'
        "200":
          description: Successfully listed the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessToken'
    post:
      tags:
        - Access Tokens
      description: Create a new instance of the resource
      operationId: createAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessToken'
        required: true
      responses:
        "401":
          description: You are not authorized to view the resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "403":
          description: Accessing the resource you were trying to reach forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "500":
          description: "An internal exception has occurred, check the logs for more\
            \ information"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "404":
          description: The resource you were trying to reach not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        "200":
          description: Successfully created the new resource
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
  /api/accessTokens/_reindex:
    post:
      tags:
        - Access Tokens
      description: Re-index the resource
      operationId: reindexAccessToken
      responses:
        "200":
          description: OK
  /api:
    get:
      tags:
        - Platform Overview
      description: Get platform overview information
      operationId: getOverview
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlatformOverview'
  /api/stores/{orgSlug}/{slug}/{version}/taxonomies:
    get:
      tags:
        - Stores
      description: Get the taxonomies that are referenced (data store) in a specific
        version of the store
      operationId: getTaxonomiesByVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/pathCounts:
    get:
      tags:
        - Stores
      description: "Get the counts of extracted data, by parent taxon, for a specific\
        \ family"
      operationId: getFamilyTableCounts
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/events:
    get:
      tags:
        - Stores
      description: Get events for a specific document family in a version of a store
      operationId: getFamilyEventsWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlatformEvent'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/dataObjects:
    get:
      tags:
        - Stores
      description: Get a specific document family in a version of the store
      operationId: getFamilyExtractedDataWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: false
          schema:
            type: string
            default: ""
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDataObject'
  /api/stores/{orgSlug}/{slug}/{version}/families/{id}/dataObjects/{projectId}:
    get:
      tags:
        - Stores
      description: "Get the document structure for this document, based on its ID\
        \ and the project through which we are viewing it"
      operationId: getFamilyExtractedDataStructureWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataObject'
  /api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/preview/{page}:
    get:
      tags:
        - Stores
      description: Generate a preview for a page of the latest content in a document
        family in a specific version of the store
      operationId: getContentObjectImageWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: dpi
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 200
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects/{id}/content:
    get:
      tags:
        - Stores
      description: Get the contents of a specific object
      operationId: getContentObjectContentWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/stores/{orgSlug}/{slug}/{version}/families/searchContents:
    get:
      tags:
        - Stores
      description: Perform a search on a specific store
      operationId: searchStoreWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchContent'
  /api/stores/{orgSlug}/{slug}/{version}/excel:
    get:
      tags:
        - Stores
      operationId: getExcelDownload
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/stores/{orgSlug}/{slug}/{version}/dataObjects/{parentId}/children:
    get:
      tags:
        - Stores
      description: Get the paginated dataObjects from the current version of the store
      operationId: getDataObjectChildrenWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDataObject'
  /api/stores/{orgSlug}/{slug}/taxonomies:
    get:
      tags:
        - Stores
      description: Get the taxonomies that are referenced (data store) in the current
        version of the store
      operationId: getTaxonomies
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
  /api/stores/{orgSlug}/{slug}/families/{id}/searchContents:
    get:
      tags:
        - Stores
      description: Perform a search on a specific document family
      operationId: searchFamily
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchContent'
  /api/stores/{orgSlug}/{slug}/families/{id}/events:
    get:
      tags:
        - Stores
      description: Get events for a specific document family in the current version
        of a store
      operationId: getFamilyEvents
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlatformEvent'
  /api/stores/{orgSlug}/{slug}/families/{documentFamilyId}/preview/{page}:
    get:
      tags:
        - Stores
      description: Generate a preview for a page of the latest content in a document
        family in the current version of the store
      operationId: getContentObjectImage
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: dpi
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 200
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/stores/{orgSlug}/{slug}/families/{documentFamilyId}/objects/{id}/content:
    get:
      tags:
        - Stores
      operationId: getContentObjectContent
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/stores/{orgSlug}/{slug}/families/searchContents:
    get:
      tags:
        - Stores
      description: Perform a search on a specific document family
      operationId: searchStore
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchContent'
  /api/stores/{orgSlug}/{slug}/dataObjects/{parentId}/children:
    get:
      tags:
        - Stores
      description: Get the paginated dataObjects from the current version of the store
      operationId: getDataObjectChildren
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDataObject'
  /api/sessions:
    get:
      tags:
        - Sessions
      description: Get a list of the sessions by access token
      operationId: listSessions
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSession'
  /api/sessions/{sessionId}:
    get:
      tags:
        - Sessions
      description: Get the specific session
      operationId: getSession
      parameters:
        - name: x-access-token
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Session'
  /api/sessions/{id}/executions:
    get:
      tags:
        - Sessions
      description: Gets paginated list of executions in the session
      operationId: listExecutions
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExecution'
  /api/sessions/{id}/executions/{executionId}:
    get:
      tags:
        - Sessions
      description: Get the specified execution in the session
      operationId: getExecution
      parameters:
        - name: x-access-token
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Execution'
  /api/projects/{id}/modelStores:
    get:
      tags:
        - Projects
      description: Get a list of the stores (type document) associated with this project
      operationId: getModelStores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
  /api/projects/{id}/documentStores:
    get:
      tags:
        - Projects
      description: Get a list of the stores (type document) associated with this project
      operationId: getDocumentStores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
  /api/projects/{id}/dataStores:
    get:
      tags:
        - Projects
      description: Get a list of the stores (type data) associated with this project
      operationId: getDataStores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
  /api/projects/{id}/dashboards:
    get:
      tags:
        - Projects
      description: Get a list of the dashboards associated with this project
      operationId: getDashboards
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
  /api/projects/{id}/contentTaxonomies:
    get:
      tags:
        - Projects
      description: Get a list of the taxonomies (type content) associated with this
        project
      operationId: getContentTaxonomies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
  /api/projects/{id}/classificationTaxonomies:
    get:
      tags:
        - Projects
      description: Get a list of the taxonomies (type classification) associated with
        this project
      operationId: getClassificationTaxonomies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
  /api/executions:
    get:
      tags:
        - Executions
      operationId: query
      parameters:
        - name: context
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExecution'
  /api/events/{organizationSlug}:
    get:
      tags:
        - Platform Events
      description: Get paginated list of the events in a specific organization
      operationId: listPlatformEvent
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: queryContext
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QueryContext'
        - name: query
          in: query
          required: false
          schema:
            type: string
            default: '*'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePlatformEvent'
  /api/events/{organizationSlug}/{id}:
    get:
      tags:
        - Platform Events
      description: Get event with specified ID in organization
      operationId: getEvent
      parameters:
        - name: organizationSlug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlatformEvent'
  /api/availableExtensionPacks:
    get:
      tags:
        - Platform Overview
      description: Get the available extension packs from Kodexa
      operationId: getAvailableExtensionPacks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
  /api/account/memberships:
    get:
      tags:
        - Account
      description: Get my memberships
      operationId: getMemberships
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership'
  /api/account/accessToken:
    get:
      tags:
        - Account
      description: Validate an access token
      operationId: validateToken
      parameters:
        - name: x-access-token
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessTokenDetails'
  /api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects/{id}:
    delete:
      tags:
        - Stores
      description: Delete specific content object from document family
      operationId: deleteContentObjectWithVersion
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: documentFamilyId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/projects/{id}/assistants/{assistantId}:
    delete:
      tags:
        - Projects
      description: Delete specified assistant
      operationId: deleteAssistant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: assistantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
components:
  schemas:
    FavoriteLink:
      type: object
      properties:
        link:
          type: string
    User:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        activated:
          type: boolean
        platformAdmin:
          type: boolean
        passwordResetDate:
          type: string
          format: date-time
        lastConnected:
          type: string
          format: date-time
        userStorage:
          $ref: '#/components/schemas/UserStorage'
      description: A user within the Kodexa platform
    UserStorage:
      type: object
      properties:
        favoriteLinks:
          type: array
          items:
            $ref: '#/components/schemas/FavoriteLink'
    CompletePasswordReset:
      required:
        - password
        - resetToken
      type: object
      properties:
        resetToken:
          type: string
        password:
          type: string
    Organization:
      required:
        - name
        - slug
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        name:
          type: string
        slug:
          pattern: "^[a-zA-Z0-9\\-_]{0,100}$"
          type: string
        publicAccess:
          type: boolean
        description:
          type: string
    Team:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
    Action:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            step:
              $ref: '#/components/schemas/StepImplementation'
            metadata:
              $ref: '#/components/schemas/ObjectMetadata'
            readme:
              type: string
    AssistantDefinition:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            schedulable:
              type: boolean
              description: The assistant can be scheduled
            reactive:
              type: boolean
              description: The assistant is reactive to content changes
            assistant:
              $ref: '#/components/schemas/AssistantImplementation'
            metadata:
              $ref: '#/components/schemas/AssistantMetadata'
            services:
              type: array
              description: Services used by the assistant
              items:
                $ref: '#/components/schemas/SlugBasedMetadata'
            processingTaxonomies:
              type: array
              description: Taxonomies that the assistant uses
              items:
                $ref: '#/components/schemas/AssistantTaxonomy'
            options:
              type: array
              description: Options for the assistant
              items:
                $ref: '#/components/schemas/Option'
            additionalTaxonOptions:
              type: array
              description: This are additional properties that can be set on a label
                when the assistant is part of the project
              items:
                $ref: '#/components/schemas/Option'
            eventTypes:
              type: array
              description: Custom event types that the assistant is able to response
                to
              items:
                $ref: '#/components/schemas/CustomEvent'
            defaultSchedules:
              type: array
              description: The default schedules that the assistant has
              items:
                $ref: '#/components/schemas/ScheduleDefinition'
            defaultSubscriptions:
              type: array
              description: The default subscriptions that the assistant has
              items:
                $ref: '#/components/schemas/EventSubscription'
            fullDescription:
              type: string
              description: The full description of the assistant
            helpUrl:
              type: string
              description: A help URL where you can learn more about the assistant
            category:
              type: string
              description: The category of assistant
              enum:
                - TASK
                - DOCUMENT
                - CONNECTOR
                - MACHINE_LEARNING
                - SUPPLEMENTAL
    AssistantImplementation:
      type: object
      properties:
        package:
          type: string
        class:
          type: string
      description: The implementation of the assistant
    AssistantMetadata:
      type: object
      properties:
        avatar:
          $ref: '#/components/schemas/Avatar'
        tags:
          type: array
          items:
            type: string
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/TabGroup'
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
      description: Additional metadata for the assistant
    AssistantTaxonomy:
      type: object
      properties:
        ref:
          type: string
      description: Taxonomies that the assistant uses
    Avatar:
      type: object
      properties:
        icon:
          type: string
        iconGroup:
          type: string
    ChartWidget:
      type: object
      allOf:
        - $ref: '#/components/schemas/DashboardWidget'
        - type: object
          properties:
            options:
              type: object
              additionalProperties:
                type: object
    ColumnState:
      type: object
      properties:
        field:
          type: string
        title:
          type: string
        cell:
          type: string
        width:
          type: string
        groupable:
          type: boolean
        sortable:
          type: boolean
        resizeable:
          type: boolean
    ContainerResources:
      type: object
      properties:
        memory:
          type: string
        cpu:
          type: string
    ContentMetadata:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          document: '#/components/schemas/DocumentContentMetadata'
          model: '#/components/schemas/ModelContentMetadata'
          data: '#/components/schemas/ModelContentMetadata'
    Credential:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
    CustomEvent:
      type: object
      properties:
        name:
          pattern: "^[a-zA-Z0-9\\-_]{0,40}$"
          type: string
          description: The name of the event
        icon:
          type: string
          description: The name of a Material Design Icon to use for the event
        label:
          type: string
          description: The label to use on the event in the UI
        description:
          type: string
          description: The long description for the event
        contentObject:
          type: boolean
          description: Does the event require a content object
        options:
          type: array
          description: Options available for this event
          items:
            $ref: '#/components/schemas/Option'
      description: A Custom Event allows you to define an subtype of assistant event
        with options
    Dashboard:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            rows:
              type: array
              items:
                $ref: '#/components/schemas/DashboardRow'
    DashboardColumn:
      type: object
      properties:
        id:
          type: string
        cols:
          type: string
        height:
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/DashboardWidget'
    DashboardRow:
      type: object
      properties:
        id:
          type: string
        height:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DashboardColumn'
    DashboardWidget:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        height:
          type: string
      discriminator:
        propertyName: type
        mapping:
          chart: '#/components/schemas/ChartWidget'
          textbox: '#/components/schemas/TextboxWidget'
    DeploymentMetadata:
      type: object
      properties:
        deploymentType:
          type: string
          enum:
            - KUBERNETES
            - AWS_LAMBDA
            - AZURE_CLOUD_FUNCTION
            - NONE
        minReplicas:
          type: integer
          format: int32
        maxReplicas:
          type: integer
          format: int32
        reservedConcurrency:
          type: integer
          format: int32
        limits:
          $ref: '#/components/schemas/ContainerResources'
        requests:
          $ref: '#/components/schemas/ContainerResources'
        memoryAssigned:
          type: string
        containerName:
          type: string
        serviceName:
          type: string
        functionArn:
          type: string
        subscriptionArn:
          type: string
        sentryDsn:
          type: string
        queueUrl:
          type: string
        queueArn:
          type: string
        eventSourceMappingUuid:
          type: string
        environment:
          type: object
          additionalProperties:
            type: string
        matchLabels:
          type: object
          additionalProperties:
            type: string
    DockerSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExtensionPackSource'
        - type: object
          properties:
            location:
              type: string
    DocumentColumn:
      type: object
      properties:
        label:
          type: string
          description: The label to use for the column heading
        path:
          type: string
          description: The path to the data
    DocumentContentMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/ContentMetadata'
        - type: object
          properties:
            type:
              type: string
              description: The type of content metadata
    EventSubscription:
      required:
        - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          description: The type of subscription object
      description: The default subscriptions that the assistant has
      discriminator:
        propertyName: type
        mapping:
          path: '#/components/schemas/PathSubscription'
          label: '#/components/schemas/LabelSubscription'
          mixin: '#/components/schemas/MixinSubscription'
    ExceptionDetails:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorMessage:
          type: string
        errorType:
          type: string
        executedVersion:
          type: string
        advice:
          type: string
        description:
          type: string
        cause:
          type: object
        documentationUrl:
          type: string
        stackTrace:
          type: array
          items:
            type: object
        help:
          type: string
        optionErrors:
          type: object
          additionalProperties:
            type: object
        validationErrors:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ExtensionPack:
      required:
        - description
        - name
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            orgSlug:
              pattern: "^[a-zA-Z0-9\\-_]{0,100}$"
              type: string
            slug:
              pattern: "^[a-zA-Z0-9\\-_]{0,100}$"
              type: string
            name:
              type: string
            description:
              type: string
            publicAccess:
              type: boolean
            packUri:
              type: string
            status:
              type: string
              enum:
                - PENDING
                - BUILDING
                - BUILT
                - AVAILABLE
                - FAILED
                - UNDEPLOYED
            deployable:
              type: boolean
            services:
              type: array
              items:
                $ref: '#/components/schemas/SlugBasedMetadata'
            source:
              $ref: '#/components/schemas/ExtensionPackSource'
            deployment:
              $ref: '#/components/schemas/DeploymentMetadata'
    ExtensionPackSource:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          docker: '#/components/schemas/DockerSource'
    LabelSubscription:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/EventSubscription'
        - type: object
          properties:
            labels:
              type: array
              items:
                type: string
            inverted:
              type: boolean
    MetadataTag:
      type: object
      properties:
        tag:
          type: string
        imageUrl:
          type: string
      description: A list of associated tags
    MixinSubscription:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/EventSubscription'
        - type: object
          properties:
            mixins:
              type: array
              items:
                type: string
            inverted:
              type: boolean
    ModelContentMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/ContentMetadata'
        - type: object
          properties:
            type:
              type: string
              description: The type of content metadata
            modelRuntimeRef:
              type: string
              description: The reference to the model runtime to use
            state:
              type: string
              description: The state of the model in this store
              enum:
                - PENDING
                - PREPARING
                - PREPARED
                - TRAINING
                - TRAINED
                - DEPLOYED
                - UNDEPLOYED
                - FAILED
            options:
              type: array
              description: The options for this model instance
              items:
                $ref: '#/components/schemas/Option'
            runtimeTrainingParameters:
              type: object
              additionalProperties:
                type: object
                description: The parameters passed to the model runtime for training
              description: The parameters passed to the model runtime for training
            runtimeInferenceParameters:
              type: object
              additionalProperties:
                type: object
                description: The parameters passed to the model runtime for inference
              description: The parameters passed to the model runtime for inference
            buildStatistics:
              type: object
              additionalProperties:
                type: object
                description: Build statistics (note this will update if the model is
                  training)
              description: Build statistics (note this will update if the model is training)
            finalStatistics:
              type: object
              additionalProperties:
                type: object
                description: Final statistics from the model
              description: Final statistics from the model
            deployment:
              $ref: '#/components/schemas/DeploymentMetadata'
            taxonomy:
              $ref: '#/components/schemas/Taxonomy'
            additionalTaxonOptions:
              type: array
              description: This are additional properties that can be set on a label
                when the model is part of the project
              items:
                $ref: '#/components/schemas/Option'
            lastTrainEvent:
              $ref: '#/components/schemas/ModelTrainExecution'
    ModelRuntime:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            inferenceAction:
              type: string
              description: The reference to the action that will be used for inference
            trainingEntrypoint:
              type: string
              description: A reference to the entry point for training
            deploymentType:
              type: string
              description: "The deployment to use, local means that the model runtime\
              \ can be re-used across models, while container means that the model\
              \ store must be deployed with the model runtime"
              enum:
                - LOCAL
                - CONTAINER
            containerUrl:
              type: string
              description: The URL of the container to use if the deployment type is
                CONTAINER
            deploymentDefaults:
              $ref: '#/components/schemas/DeploymentMetadata'
    ModelTrainExecution:
      type: object
      properties:
        serviceName:
          type: string
        containerName:
          type: string
        options:
          type: object
          additionalProperties:
            type: object
        optionTypes:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
            - REQUESTED
            - SKIPPED
            - CANCELLING
            - CANCELLED
        modelStoreRef:
          type: string
        trainingStoreRef:
          type: string
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/EventSubscription'
        exceptionDetails:
          $ref: '#/components/schemas/ExceptionDetails'
      description: If the model has been trained this will contain the details from
        that training event execution
    ObjectMetadata:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
    Option:
      type: object
      properties:
        tabId:
          type: string
        name:
          type: string
        label:
          type: string
        hint:
          type: string
        required:
          type: boolean
        type:
          type: string
        listType:
          type: string
        default:
          type: object
        description:
          type: string
        showIf:
          type: string
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/PossibleValue'
      description: Options available for this event
    Overlay:
      type: object
      properties:
        id:
          type: string
          description: The ID of the taxon
        name:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/OverlayCondition'
      description: "Overlays provide the ability to apply validation, normalization\
        \ and enrichment"
    OverlayCondition:
      type: object
    PathSubscription:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/EventSubscription'
        - type: object
          properties:
            path:
              type: string
            caseSensitive:
              type: boolean
            inverted:
              type: boolean
    Pipeline:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            metadata:
              $ref: '#/components/schemas/PipelineImplementationMetadata'
    PipelineExample:
      type: object
      properties:
        title:
          type: string
          description: Title of the example
        description:
          type: string
          description: Description of the example
        url:
          type: string
          description: URL to the example input
      description: Metadata linking to an example input for this pipeline
    PipelineImplementationMetadata:
      type: object
      properties:
        steps:
          type: array
          description: The metadata for the steps in this pipeline
          items:
            $ref: '#/components/schemas/PipelineStepMetadata'
        stores:
          type: array
          description: The metadata for the stores in this pipeline
          items:
            $ref: '#/components/schemas/PipelineStore'
        moreInfoUrl:
          type: string
          description: A URL for more information for this pipeline
        exampleUrls:
          type: array
          description: "A list of the examples of this pipeline, the examples are\
            \ example inputs for the pipeline"
          items:
            $ref: '#/components/schemas/PipelineExample'
      description: Metadata captured when publishing a pipeline definition
    PipelineStepMetadata:
      type: object
      properties:
        name:
          type: string
          description: The name of the step
        ref:
          type: string
          description: The reference to the action
        enabled:
          type: boolean
          description: The reference to the action
        parameterized:
          type: boolean
          description: Is the step parameterized
        options:
          type: object
          additionalProperties:
            type: object
            description: The options for the step in the pipeline
          description: The options for the step in the pipeline
        stepType:
          type: string
          description: The type of step (ACTION or MODEL)
          enum:
            - ACTION
            - MODEL
      description: The metadata for the steps in this pipeline
    PipelineStore:
      type: object
      properties:
        name:
          type: string
        ref:
          type: string
        storeType:
          type: string
          enum:
            - DOCUMENT
            - TABLE
            - DICTIONARY
            - MODEL
      description: The metadata for the stores in this pipeline
    PossibleValue:
      type: object
      properties:
        label:
          type: string
        value:
          type: object
    ProjectAssistant:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        assistantDefinitionRef:
          type: string
        options:
          type: object
          additionalProperties:
            type: object
        stores:
          uniqueItems: true
          type: array
          items:
            type: string
        schedules:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ScheduleDefinition'
        subscriptions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EventSubscription'
      description: The assistants that will be created with the project template
    ProjectDashboard:
      type: object
      properties:
        slug:
          pattern: "^[a-zA-Z0-9\\-_]{0,255}$"
          type: string
        name:
          type: string
        description:
          type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/DashboardRow'
      description: The dashboards that will be created with the project template
    ProjectStore:
      type: object
      properties:
        slug:
          type: string
        name:
          type: string
        description:
          type: string
        storeType:
          type: string
          enum:
            - DOCUMENT
            - TABLE
            - DICTIONARY
            - MODEL
        storePurpose:
          type: string
          enum:
            - OPERATIONAL
            - TRAINING
      description: The stores that will be created with the project template
    ProjectTaxonomy:
      type: object
      properties:
        slug:
          type: string
        name:
          type: string
        description:
          type: string
        taxonomyType:
          type: string
          description: The type of taxonomy
          enum:
            - CONTENT
            - CLASSIFICATION
            - PROCESSING
        taxons:
          type: array
          description: The hierarchical structure of taxon's in this taxonomy
          items:
            $ref: '#/components/schemas/Taxon'
      description: The taxonomies that will be created with the project template
    ProjectTemplate:
      required:
        - name
        - slug
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            stores:
              type: array
              description: The stores that will be created with the project template
              items:
                $ref: '#/components/schemas/ProjectStore'
            assistants:
              type: array
              description: The assistants that will be created with the project template
              items:
                $ref: '#/components/schemas/ProjectAssistant'
            taxonomies:
              type: array
              description: The taxonomies that will be created with the project template
              items:
                $ref: '#/components/schemas/ProjectTaxonomy'
            dashboards:
              type: array
              description: The dashboards that will be created with the project template
              items:
                $ref: '#/components/schemas/ProjectDashboard'
            helpUrl:
              type: string
              description: A help URL where you can learn more about the assistant
            category:
              type: string
              description: The category of project template
              enum:
                - TASK
                - DOCUMENT
                - CONNECTOR
                - MACHINE_LEARNING
                - SUPPLEMENTAL
    SavedFilter:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        filter:
          $ref: '#/components/schemas/StoreFilter'
      description: Filters that have been saved for this store
    ScheduleDefinition:
      type: object
      properties:
        type:
          type: string
        cronExpression:
          type: string
        lastEvent:
          type: string
          format: date-time
        nextEvent:
          type: string
          format: date-time
      description: The default schedules that the assistant has
    SelectionOption:
      type: object
      properties:
        label:
          type: string
        value:
          type: object
        description:
          type: string
      description: "If data type is SELECTION, this is the list of available options"
    SlugBasedMetadata:
      required:
        - name
        - slug
        - type
      type: object
      properties:
        ref:
          type: string
          description: The reference to the metadata object
        schemaVersion:
          type: integer
          description: The version of the schema
          format: int32
        orgSlug:
          pattern: "^[a-zA-Z0-9\\-_]{0,255}$"
          type: string
          description: The slug of the organization that owns this metadata object
        slug:
          pattern: "^[a-zA-Z0-9\\-_]{0,255}$"
          type: string
          description: The slug used when referencing this metadata object
        type:
          type: string
          description: The type of metadata object
        name:
          type: string
          description: The name of the object
        description:
          type: string
          description: The description of the object
        version:
          type: string
          description: The version of the object
        deployed:
          type: string
          description: The date/time the object was deployed into this Kodexa instance
          format: date-time
        publicAccess:
          type: boolean
          description: Is the metadata object publicly accessible by other organizations
        imageUrl:
          type: string
          description: URL of image for assistant
        metadataTag:
          type: array
          description: A list of associated tags
          items:
            $ref: '#/components/schemas/MetadataTag'
      discriminator:
        propertyName: type
        mapping:
          assistant: '#/components/schemas/Action'
          pipeline: '#/components/schemas/Pipeline'
          dashboard: '#/components/schemas/Dashboard'
          store: '#/components/schemas/Store'
          taxonomy: '#/components/schemas/Taxonomy'
          projectTemplate: '#/components/schemas/ProjectTemplate'
          assistantDefinition: '#/components/schemas/AssistantDefinition'
          credential: '#/components/schemas/Credential'
          modelRuntime: '#/components/schemas/ModelRuntime'
    StepImplementation:
      type: object
      properties:
        package:
          type: string
        class:
          type: string
    Store:
      required:
        - name
        - slug
        - type
      type: object
      description: Provides the definition and metadata for a store
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            metadata:
              $ref: '#/components/schemas/ContentMetadata'
            storeType:
              type: string
              description: The type of object the store will contain
              enum:
                - DOCUMENT
                - TABLE
                - DICTIONARY
                - MODEL
            searchable:
              type: boolean
              description: "Is the store indexed, and thus searchable"
            storePurpose:
              type: string
              description: The purpose of the store (used by UI and assistants to understand
                how to interact with the store events)
              enum:
                - OPERATIONAL
                - TRAINING
            viewOptions:
              $ref: '#/components/schemas/StoreViewOptions'
            savedFilters:
              type: array
              description: Filters that have been saved for this store
              items:
                $ref: '#/components/schemas/SavedFilter'
    StoreFilter:
      type: object
    StoreViewOptions:
      type: object
      properties:
        showLastEvent:
          type: boolean
        showExtension:
          type: boolean
        showCreated:
          type: boolean
        showModified:
          type: boolean
        showPathCounts:
          type: boolean
        showClassifications:
          type: boolean
        showSize:
          type: boolean
        showAssignments:
          type: boolean
        showStatus:
          type: boolean
        additionalColumns:
          type: array
          items:
            $ref: '#/components/schemas/DocumentColumn'
        columnStates:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ColumnState'
      description: Options for viewing this store
    TabGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        showIf:
          type: string
    Taxon:
      type: object
      properties:
        id:
          type: string
          description: The ID of the taxon
        label:
          type: string
          description: The text to display for this taxon
        generateName:
          type: boolean
          description: "Is the name generated, this allows that you can change displays\
            \ without impacted existing content"
        group:
          type: boolean
          description: "Is this taxon a group, and therefore can't have a value, can\
            \ only have children"
        name:
          pattern: "^[a-zA-Z0-9\\-_]{0,255}$"
          type: string
          description: "The name to be used, note based on the hierarchy the actual\
            \ label in the document will have the parent name too"
        valuePath:
          type: string
          description: Where to get the value for this taxon when extracting
          enum:
            - VALUE_OR_ALL_CONTENT
            - VALUE_ONLY
            - ALL_CONTENT
            - DATA_PATH
            - METADATA
            - EXPRESSION
        metadataValue:
          type: string
          description: If the type is metadata this will be the metadata option
          enum:
            - FILENAME
            - TRANSACTION_UUID
            - CREATED_DATETIME
        dataPath:
          type: string
          description: "The path to the data, based on the data inside the label (tag)\
            \ within the document"
        expression:
          type: string
          description: "If the taxon is based on expression, this is the expression\
            \ based on the available objects"
        description:
          type: string
          description: The description of the taxon
        enabled:
          type: boolean
          description: Is the taxon enabled (used in the UI)
        color:
          type: string
          description: Hex encoding of the color to use for the taxon
        children:
          type: array
          description: The children under this taxon
          items:
            $ref: '#/components/schemas/Taxon'
        options:
          type: array
          description: Options that can be shown for the taxon (usually used in assistant
            taxonomies)
          items:
            $ref: '#/components/schemas/Option'
        nodeTypes:
          type: array
          description: "A list of the node types that this taxon applies to (empty\
            \ means everything), used in the UI"
          items:
            type: string
            description: "A list of the node types that this taxon applies to (empty\
              \ means everything), used in the UI"
        taxonType:
          type: string
          description: Expected data type to coalesce to (defaults to STRING)
          enum:
            - STRING
            - DATE
            - DATE_TIME
            - NUMBER
            - DECIMAL
            - FLOAT
            - BOOLEAN
            - CURRENCY
            - URL
            - EMAIL_ADDRESS
            - PHONE_NUMBER
            - POSTAL_CODE
            - SELECTION
        selectionOptions:
          type: array
          description: "If data type is SELECTION, this is the list of available options"
          items:
            $ref: '#/components/schemas/SelectionOption'
        typeFeatures:
          type: object
          additionalProperties:
            type: object
            description: Additional features for the type handling
          description: Additional features for the type handling
        path:
          type: string
          description: The path to the node
      description: A taxon is an individual label within a taxonomy
    Taxonomy:
      required:
        - name
        - slug
        - type
      type: object
      description: Provides the taxonomy hierarchy that is used for content and document
        classification and labeling
      allOf:
        - $ref: '#/components/schemas/SlugBasedMetadata'
        - type: object
          properties:
            type:
              type: string
              description: The metadata object type
            extensionPackRef:
              type: string
              description: The reference to the extension pack (if the metadata object
                was created by an extension pack)
            taxonomyType:
              type: string
              description: The type of taxonomy
              enum:
                - CONTENT
                - CLASSIFICATION
                - PROCESSING
            enabled:
              type: boolean
              description: Is the taxonomy enabled (effects display in the UI)
            taxons:
              type: array
              description: The hierarchical structure of taxon's in this taxonomy
              items:
                $ref: '#/components/schemas/Taxon'
            overlays:
              type: array
              description: "Overlays provide the ability to apply validation, normalization\
              \ and enrichment"
              items:
                $ref: '#/components/schemas/Overlay'
            totalTaxons:
              type: integer
              description: The total number of taxons in the taxonomy
              format: int32
    TextboxWidget:
      type: object
      allOf:
        - $ref: '#/components/schemas/DashboardWidget'
        - type: object
          properties:
            title:
              type: string
            subtitle:
              type: string
            body:
              type: string
    ValidationError:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        message:
          type: string
        option:
          type: string
        description:
          type: string
    ReprocessRequest:
      type: object
      properties:
        assistantIds:
          type: array
          items:
            type: string
        familyIds:
          type: array
          items:
            type: string
        all:
          type: boolean
    ContentClassification:
      type: object
      properties:
        label:
          type: string
        taxonomy:
          type: string
        selector:
          type: string
        confidence:
          type: number
          format: float
      description: The classification classes from the latest content object in the
        family
    ContentObject:
      required:
        - contentType
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        contentType:
          type: string
          description: The type of content
          default: ContentObjectType.DOCUMENT
          enum:
            - DOCUMENT
            - NATIVE
        documentVersion:
          type: string
        index:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/DocumentStatus'
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        metadata:
          type: object
          additionalProperties:
            type: object
        mixins:
          uniqueItems: true
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        storeRef:
          type: string
        documentFamilyId:
          type: string
      description: An ordered list of the content objects in the document family
    DocumentActor:
      type: object
      properties:
        actorId:
          type: string
          description: The ID for the actor (dependent on the actor type)
        actorType:
          type: string
          description: The type of actor
          enum:
            - USER
            - ASSISTANT
            - ACCESS_TOKEN
            - API
      description: Provides the definition of an actor in a transition
    DocumentAssignment:
      required:
        - documentFamily
        - user
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        documentFamily:
          $ref: '#/components/schemas/DocumentFamily'
      description: A list of the assignments to users for this document
    DocumentFamily:
      required:
        - path
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        documentStatus:
          $ref: '#/components/schemas/DocumentStatus'
        assignments:
          uniqueItems: true
          type: array
          description: A list of the assignments to users for this document
          items:
            $ref: '#/components/schemas/DocumentAssignment'
        storeRef:
          type: string
          description: The reference to the store that is holding this document family
        path:
          type: string
          description: The path to the document family in the store
        locked:
          type: boolean
          description: Is the document family locked. If locked then you can no longer
            modify or add any new document transitions
        created:
          type: string
          description: Date/Time Created
          format: date-time
        modified:
          type: string
          description: Date/Time Modified
          format: date-time
        size:
          type: integer
          description: Size of the original native content in bytes
          format: int64
        indexed:
          type: boolean
          description: Is the document family indexed for search
        contentObjects:
          uniqueItems: true
          type: array
          description: An ordered list of the content objects in the document family
          items:
            $ref: '#/components/schemas/ContentObject'
        transitions:
          uniqueItems: true
          type: array
          description: An ordered list of the transitions in the document family
          items:
            $ref: '#/components/schemas/DocumentTransition'
        labels:
          uniqueItems: true
          type: array
          description: The labels from the latest content object in the family
          items:
            $ref: '#/components/schemas/Label'
        mixins:
          uniqueItems: true
          type: array
          description: The mixins from the latest content object in the family
          items:
            type: string
            description: The mixins from the latest content object in the family
        classes:
          uniqueItems: true
          type: array
          description: The classification classes from the latest content object in
            the family
          items:
            $ref: '#/components/schemas/ContentClassification'
      description: A document family is the representation of a single peice of external
        content (ie. a PDF) and all the related document representations of that file
    DocumentStatus:
      required:
        - status
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        color:
          type: string
        icon:
          type: string
        status:
          type: string
        statusType:
          type: string
          enum:
            - UNRESOLVED
            - RESOLVED
    DocumentTransition:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        transitionType:
          type: string
          description: The type of transition
          enum:
            - DERIVED
        index:
          type: integer
          format: int32
        dateTime:
          type: string
          description: The date/time of the transition
          format: date-time
        actor:
          $ref: '#/components/schemas/DocumentActor'
        label:
          type: string
          description: A label for the transition (this can be used later if we want
            to prune based on a label)
        destinationContentObjectId:
          type: string
        sourceContentObjectId:
          type: string
      description: "Provides the definition of a transition for a document, where\
        \ a change was applied by an assistant, user or external process"
    Label:
      required:
        - label
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        color:
          type: string
        label:
          type: string
        name:
          type: string
      description: The labels from the latest content object in the family
    BulkCopy:
      type: object
      properties:
        targetStoreRef:
          type: string
        all:
          type: boolean
        documentFamilyIds:
          type: array
          items:
            type: string
    FamilyRename:
      required:
        - path
      type: object
      properties:
        path:
          type: string
    ContentFeature:
      type: object
      properties:
        featureType:
          type: string
        name:
          type: string
        value:
          type: array
          items:
            type: object
        single:
          type: boolean
    FeatureSet:
      type: object
      properties:
        nodeFeatures:
          type: array
          items:
            $ref: '#/components/schemas/NodeFeatures'
    NodeFeatures:
      type: object
      properties:
        nodeUuid:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/ContentFeature'
    AttributeStatus:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        color:
          type: string
        icon:
          type: string
        status:
          type: string
        statusType:
          type: string
          enum:
            - UNRESOLVED
            - RESOLVED
    CellValidationMessage:
      type: object
      properties:
        message:
          type: string
          description: Message to describe the validation issue
        validationFeatures:
          type: object
          additionalProperties:
            type: object
            description: Additional features from the validation
          description: Additional features from the validation
      description: A list of messages relating to the validity
    DataAttribute:
      required:
        - dataType
        - tag
        - validationState
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        value:
          type: string
        truncated:
          type: boolean
        dataType:
          type: string
          enum:
            - STRING
            - DATE
            - DATE_TIME
            - NUMBER
            - DECIMAL
            - FLOAT
            - BOOLEAN
            - CURRENCY
            - URL
            - EMAIL_ADDRESS
            - PHONE_NUMBER
            - POSTAL_CODE
            - SELECTION
        tag:
          type: string
        tagUuid:
          type: string
        dateValue:
          type: string
          format: date-time
        floatValue:
          type: number
          format: float
        decimalValue:
          type: number
        numberValue:
          type: integer
          format: int32
        booleanValue:
          type: boolean
        stringValue:
          type: string
        attributeStatus:
          $ref: '#/components/schemas/AttributeStatus'
        validationState:
          type: string
          description: The current validation state
          enum:
            - VALID
            - INVALID
            - WARNING
        validationMessages:
          type: array
          description: A list of messages relating to the validity
          items:
            $ref: '#/components/schemas/CellValidationMessage'
        dataFeatures:
          type: object
          additionalProperties:
            type: object
            description: Additional features for the data
          description: Additional features for the data
        label:
          type: string
          writeOnly: true
    DataLineage:
      type: object
      properties:
        storeRef:
          type: string
        documentFamilyId:
          type: string
        executionId:
          type: string
        contentObjectId:
          type: string
    DataObject:
      required:
        - documentFamily
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        documentFamily:
          $ref: '#/components/schemas/DocumentFamily'
        taxonomyRef:
          type: string
        path:
          type: string
        rowNum:
          type: integer
          format: int32
        sourceOrdering:
          type: string
        dateTime:
          type: string
          format: date-time
        lineage:
          $ref: '#/components/schemas/DataLineage'
        attributes:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/DataAttribute'
        parentId:
          type: string
        storeRef:
          type: string
        taxon:
          $ref: '#/components/schemas/Taxon'
    Role:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        name:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        teams:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Team'
      description: A role that can be used to manage rights
    Project:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        organization:
          $ref: '#/components/schemas/Organization'
        name:
          type: string
        description:
          type: string
        projectTemplate:
          $ref: '#/components/schemas/ProjectTemplateMetadata'
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        documentStatuses:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/DocumentStatus'
        attributeStatuses:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AttributeStatus'
    ProjectTemplateMetadata:
      required:
        - slug
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        version:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        slug:
          type: string
        metadata:
          $ref: '#/components/schemas/ProjectTemplate'
        extensionPackRef:
          type: string
        projects:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Project'
        ref:
          type: string
    ProjectResourcesUpdate:
      type: object
      properties:
        taxonomyRefs:
          type: array
          items:
            type: string
        storeRefs:
          type: array
          items:
            type: string
        dashboardRefs:
          type: array
          items:
            type: string
    Assistant:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        schedules:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AssistantSchedule'
        name:
          type: string
        description:
          type: string
        assistantDefinitionRef:
          type: string
        active:
          type: boolean
        runOnExistingContent:
          type: boolean
        options:
          type: object
          additionalProperties:
            type: object
        validationErrors:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        definition:
          $ref: '#/components/schemas/AssistantDefinition'
    AssistantSchedule:
      type: object
      properties:
        type:
          type: string
        cronExpression:
          type: string
        lastEvent:
          type: string
          format: date-time
        nextEvent:
          type: string
          format: date-time
        id:
          type: string
    Membership:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        role:
          type: string
          enum:
            - OWNER
            - READ
            - WRITE
        organization:
          $ref: '#/components/schemas/Organization'
        user:
          $ref: '#/components/schemas/User'
    QueueDetail:
      type: object
      properties:
        messageCount:
          type: integer
          format: int64
        inflight:
          type: integer
          format: int64
    DeploymentOptions:
      type: object
      properties:
        deploymentType:
          type: string
          enum:
            - KUBERNETES
            - AWS_LAMBDA
            - AZURE_CLOUD_FUNCTION
            - NONE
        maxReplicas:
          type: integer
          format: int32
        minReplicas:
          type: integer
          format: int32
        reservedConcurrency:
          type: integer
          format: int32
        memoryAssigned:
          type: string
        cpu:
          type: string
        sentryDsn:
          type: string
    PlatformConfiguration:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        welcomeMarkdown:
          type: string
        aboutMarkdown:
          type: string
        loginMessage:
          type: string
        baseOrgSlug:
          type: string
        title:
          type: string
        organizationTitle:
          type: string
        organizationsTitle:
          type: string
        organizationDescription:
          type: string
        projectTitle:
          type: string
        projectsTitle:
          type: string
        projectDescription:
          type: string
        developerLinks:
          type: boolean
        allowRegistration:
          type: boolean
        allowPasswordReset:
          type: boolean
        defaultToDesign:
          type: boolean
        extensionPackBridge:
          type: string
    UserActivation:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
    AccessToken:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string
        name:
          type: string
        token:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
    ModelTrainRequest:
      required:
        - options
        - trainingStore
      type: object
      properties:
        options:
          type: object
          additionalProperties:
            type: object
        trainingStore:
          $ref: '#/components/schemas/Store'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/EventSubscription'
    SearchContent:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the search content
        storeRef:
          type: string
          description: The ref of the store containing the document family
        documentFamilyId:
          type: string
          description: The unique ID of the document family
        containerType:
          type: string
          description: The container node type
        containerUuid:
          type: string
          description: The container node UUID
        sourceOrdering:
          type: integer
          description: The source ordering for the content (starting at 0)
          format: int64
        entities:
          type: array
          description: Entities found in the search content
          items:
            $ref: '#/components/schemas/SearchEntity'
        nodeUuid:
          type: string
          description: The unique ID of the content node
        content:
          type: string
          description: The indexed content
        documentFamily:
          $ref: '#/components/schemas/DocumentFamily'
      description: A document family is the representation of a single peice of external
        content (ie. a PDF) and all the related document representations of that file
    SearchEntity:
      type: object
      properties:
        entity:
          type: string
          description: The type of entity
        value:
          type: string
          description: The entity value
        start:
          type: integer
          description: Start position
          format: int32
        end:
          type: integer
          description: End position
          format: int32
      description: Entities identified in search content
    SessionStore:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        storeType:
          type: string
          enum:
            - DOCUMENT
            - TABLE
            - DICTIONARY
            - MODEL
        ref:
          type: string
        data:
          type: object
          additionalProperties:
            type: object
    ExecutionStatusUpdate:
      type: object
      properties:
        status:
          type: string
        statusFull:
          type: string
    Execution:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        assistant:
          $ref: '#/components/schemas/Assistant'
        description:
          type: string
        targets:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionTarget'
        session:
          $ref: '#/components/schemas/Session'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        processingTime:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
            - REQUESTED
            - SKIPPED
            - CANCELLING
            - CANCELLED
        exceptionDetails:
          $ref: '#/components/schemas/ExceptionDetails'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionStep'
        parameters:
          type: object
          additionalProperties:
            type: object
        modelTrain:
          $ref: '#/components/schemas/ModelTrainExecution'
        customOptions:
          type: object
          additionalProperties:
            type: object
        context:
          type: object
          additionalProperties:
            type: object
        childExecutions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Execution'
        stores:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SessionStore'
        documentFamily:
          $ref: '#/components/schemas/DocumentFamily'
        statusText:
          type: string
        statusFull:
          type: string
    ExecutionStep:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
            - REQUESTED
            - SKIPPED
            - CANCELLING
            - CANCELLED
        exceptionDetails:
          $ref: '#/components/schemas/ExceptionDetails'
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        processingTime:
          type: integer
          format: int64
        parameterized:
          type: boolean
        enabled:
          type: boolean
        options:
          type: object
          additionalProperties:
            type: object
        optionTypes:
          type: object
          additionalProperties:
            type: string
        context:
          type: object
          additionalProperties:
            type: object
        contentObjects:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ContentObject'
        stores:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SessionStore'
        inputId:
          type: string
        outputId:
          type: string
        ref:
          type: string
        stepType:
          type: string
          enum:
            - ACTION
            - MODEL
        deploymentType:
          type: string
          enum:
            - KUBERNETES
            - AWS_LAMBDA
            - AZURE_CLOUD_FUNCTION
            - NONE
        serviceName:
          type: string
        containerName:
          type: string
    ExecutionTarget:
      type: object
      properties:
        type:
          type: string
          enum:
            - DOCUMENT_STORE
            - TAXONOMY_STORE
            - DATA_STORE
        ref:
          type: string
        documentFamilyId:
          type: string
        contentObjectId:
          type: string
        actor:
          $ref: '#/components/schemas/DocumentActor'
        taxonomyRefs:
          type: array
          items:
            type: string
    Session:
      required:
        - state
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        state:
          type: string
          enum:
            - OPEN
            - CLOSED
        token:
          type: string
        lastAccessed:
          type: string
          format: date-time
    AssistantEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            type:
              type: string
            contentObject:
              $ref: '#/components/schemas/ContentObject'
            options:
              type: object
              additionalProperties:
                type: object
            eventType:
              type: string
            assistant:
              $ref: '#/components/schemas/Assistant'
    AssistantExecution:
      type: object
      properties:
        assistantId:
          type: string
        assistantName:
          type: string
        ref:
          type: string
        deploymentType:
          type: string
          enum:
            - KUBERNETES
            - AWS_LAMBDA
            - AZURE_CLOUD_FUNCTION
            - NONE
        serviceName:
          type: string
        containerName:
          type: string
        options:
          type: object
          additionalProperties:
            type: object
        optionTypes:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
            - REQUESTED
            - SKIPPED
            - CANCELLING
            - CANCELLED
        exceptionDetails:
          $ref: '#/components/schemas/ExceptionDetails'
        event:
          oneOf:
            - $ref: '#/components/schemas/AssistantEvent'
            - $ref: '#/components/schemas/ContentEvent'
            - $ref: '#/components/schemas/ModelTrainEvent'
            - $ref: '#/components/schemas/ScheduledEvent'
        response:
          $ref: '#/components/schemas/AssistantExecutionResponse'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        processingTime:
          type: integer
          format: int64
    AssistantExecutionResponse:
      type: object
      properties:
        text:
          type: string
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/AssistantResponsePipeline'
    AssistantResponsePipeline:
      type: object
      properties:
        description:
          type: string
        pipeline:
          $ref: '#/components/schemas/Pipeline'
        writeBackToStore:
          type: boolean
        dataSourceRef:
          type: string
        taxonomyRefs:
          type: array
          items:
            type: string
    BaseEvent:
      type: object
      properties:
        type:
          type: string
          description: The type of the event
      discriminator:
        propertyName: type
        mapping:
          assistant: '#/components/schemas/AssistantEvent'
          content: '#/components/schemas/ContentEvent'
          scheduled: '#/components/schemas/ScheduledEvent'
          modelTrain: '#/components/schemas/ModelTrainEvent'
      oneOf:
        - $ref: '#/components/schemas/ContentEvent'
        - $ref: '#/components/schemas/ScheduledEvent'
        - $ref: '#/components/schemas/AssistantEvent'
        - $ref: '#/components/schemas/ModelTrainEvent'
    ContentEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            type:
              type: string
            contentObject:
              $ref: '#/components/schemas/ContentObject'
            documentFamily:
              $ref: '#/components/schemas/DocumentFamily'
            objectEventType:
              type: string
              enum:
                - NEW_OBJECT
                - DERIVED_OBJECT
    ExecutionEvent:
      required:
        - id
        - sessionId
        - token
        - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - START_EXECUTION
            - STEP_UPDATE
            - ASSISTANT_EVENT
            - ASSISTANT_RESPONSE
            - MODEL_TRAIN
            - MODEL_TRAIN_UPDATE
        executionId:
          type: string
        storeRef:
          type: string
        documentFamilyId:
          type: string
        sessionId:
          type: string
        token:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionStep'
        assistant:
          $ref: '#/components/schemas/AssistantExecution'
        modelTrain:
          $ref: '#/components/schemas/ModelTrainExecution'
        source:
          type: object
          additionalProperties:
            type: object
        payload:
          type: object
          additionalProperties:
            type: object
        contentObjects:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ContentObject'
        inputId:
          type: string
        target:
          type: string
        platformUrl:
          type: string
        sessionCallBackUrl:
          type: string
        created:
          type: string
          format: date-time
    ModelTrainEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            type:
              type: string
            modelStoreRef:
              type: string
            options:
              type: object
              additionalProperties:
                type: object
            trainingStoreRef:
              type: string
            subscriptions:
              type: array
              items:
                $ref: '#/components/schemas/EventSubscription'
    ScheduledEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            type:
              type: string
            lastEvent:
              type: string
              format: date-time
            nextEvent:
              type: string
              format: date-time
    ExecutionLogEntry:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        entry:
          type: string
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RegisterUser:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    PasswordReset:
      required:
        - email
      type: object
      properties:
        email:
          type: string
    PasswordChange:
      required:
        - newPassword
        - oldPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    PlatformOverview:
      type: object
      properties:
        name:
          type: string
        release:
          type: string
        description:
          type: string
        hostName:
          type: string
          description: The hostname for this instance
        environment:
          type: string
          description: The name of the environment in which this instance is running
        commitId:
          type: string
          description: The git commit ID for this API server instance running
        buildTime:
          type: string
          description: The build time for this API server instance running
        version:
          type: string
          description: The version of API server instance running
        ua:
          type: string
          description: Google UA
        dsn:
          type: string
      description: "Provides details on the version, build and environment that is\
        \ currently running"
    QueryContext:
      type: object
      properties:
        pageSize:
          type: integer
          description: Page size (default 20)
          format: int32
        page:
          type: integer
          description: Page number (default 1)
          format: int32
        sort:
          type: string
          description: Sorts to apply
        filter:
          type: string
          description: Simple filter to apply
        query:
          type: string
          description: Simple query to apply (if available)
    PageUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    Pageable:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageTeam:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageTaxonomy:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Taxonomy'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageStore:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Store'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageDocumentFamily:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DocumentFamily'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PlatformEvent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object
        uuid:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        dateTime:
          type: string
          format: date-time
        assistant:
          $ref: '#/components/schemas/Assistant'
        eventDetail:
          oneOf:
            - $ref: '#/components/schemas/AssistantEvent'
            - $ref: '#/components/schemas/ContentEvent'
            - $ref: '#/components/schemas/ModelTrainEvent'
            - $ref: '#/components/schemas/ScheduledEvent'
        documentFamily:
          $ref: '#/components/schemas/DocumentFamily'
    PageDataObject:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DataObject'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageSession:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageExecution:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Execution'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageRole:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageProject:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageAssistant:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Assistant'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PagePlatformEvent:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PlatformEvent'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageProjectTemplate:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTemplate'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PagePipeline:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Pipeline'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageOrganization:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageModelRuntime:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ModelRuntime'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageMembership:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Membership'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageLabel:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageExtensionPack:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionPack'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageDashboard:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageCredential:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Credential'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageAssistantDefinition:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AssistantDefinition'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageAction:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    AccessTokenDetails:
      type: object
      properties:
        type:
          type: string
        token:
          type: string
    PageAccessToken:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccessToken'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    BulkDelete:
      type: object
      properties:
        all:
          type: boolean
        documentFamilyIds:
          type: array
          items:
            type: string
