
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_OPleftAND_OPleftEQUAL_OPleftREL_OPleftPLUS_OPMINUS_OPleftMULT_OPDIV_OPMOD_OPrightUMINUS_OPleftUNION_OPleftINTERSECT_OPABBREV_AXIS_AT ABBREV_PATH_SEP ABBREV_STEP_PARENT ABBREV_STEP_SELF AND_OP AXISNAME AXIS_SEP CLOSE_BRACKET CLOSE_PAREN COLON COMMA DIV_OP DOLLAR EQUAL_OP FLOAT FUNCNAME INTEGER INTERSECT_OP INTERSECT_OP LITERAL MINUS_OP MOD_OP MULT_OP NCNAME NODETYPE OPEN_BRACKET OPEN_PAREN OR_OP PATH_SEP PLUS_OP REL_OP STAR_OP UNION_OP\n    Expr : Expr OR_OP Expr\n         | Expr AND_OP Expr\n         | Expr EQUAL_OP Expr\n         | Expr REL_OP Expr\n         | Expr PLUS_OP Expr\n         | Expr MINUS_OP Expr\n         | Expr MULT_OP Expr\n         | Expr DIV_OP Expr\n         | Expr MOD_OP Expr\n         | Expr UNION_OP Expr\n         | Expr INTERSECT_OP Expr\n    \n    Expr : MINUS_OP Expr %prec UMINUS_OP\n    \n    Expr : FilterExpr PATH_SEP RelativeLocationPath\n         | FilterExpr ABBREV_PATH_SEP RelativeLocationPath\n    \n    Expr : RelativeLocationPath\n         | AbsoluteLocationPath\n         | AbbreviatedAbsoluteLocationPath\n         | FilterExpr\n    \n    AbsoluteLocationPath : PATH_SEP\n    \n    AbsoluteLocationPath : PATH_SEP RelativeLocationPath\n    \n    AbbreviatedAbsoluteLocationPath : ABBREV_PATH_SEP RelativeLocationPath\n    \n    RelativeLocationPath : Step\n    \n    RelativeLocationPath : RelativeLocationPath PATH_SEP Step\n                         | RelativeLocationPath ABBREV_PATH_SEP Step\n    \n    Step : NodeTest\n    \n    Step : NodeTest PredicateList\n    \n    Step : AxisSpecifier NodeTest\n    \n    Step : AxisSpecifier NodeTest PredicateList\n    \n    Step : ABBREV_STEP_SELF\n         | ABBREV_STEP_PARENT\n    \n    AxisSpecifier : AXISNAME AXIS_SEP\n    \n    AxisSpecifier : ABBREV_AXIS_AT\n    \n    NodeTest : NameTest\n    \n    NodeTest : NODETYPE OPEN_PAREN CLOSE_PAREN\n    \n    NodeTest : NODETYPE OPEN_PAREN LITERAL CLOSE_PAREN\n    \n    NameTest : STAR_OP\n    \n    NameTest : NCNAME COLON STAR_OP\n    \n    NameTest : QName\n    \n    QName : NCNAME COLON NCNAME\n    \n    QName : NCNAME\n    \n    FuncQName : NCNAME COLON FUNCNAME\n    \n    FuncQName : FUNCNAME\n    \n    FilterExpr : VariableReference\n               | LITERAL\n               | Number\n               | FunctionCall\n    \n    FilterExpr : OPEN_PAREN Expr CLOSE_PAREN\n    \n    FilterExpr : FilterExpr Predicate\n    \n    PredicateList : Predicate\n    \n    PredicateList : PredicateList Predicate\n    \n    Predicate : OPEN_BRACKET Expr CLOSE_BRACKET\n    \n    VariableReference : DOLLAR QName\n    \n    Number : FLOAT\n           | INTEGER\n    \n    FunctionCall : FuncQName FormalArguments\n    \n    FormalArguments : OPEN_PAREN CLOSE_PAREN\n    \n    FormalArguments : OPEN_PAREN ArgumentList CLOSE_PAREN\n    \n    ArgumentList : Expr\n    \n    ArgumentList : ArgumentList COMMA Expr\n    '
    
_lr_action_items = {'MINUS_OP':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,51,52,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,94,95,96,],[2,36,2,-18,-19,-15,-16,-17,-43,-44,-45,-46,2,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,2,2,2,2,2,2,2,2,2,2,2,-12,-48,2,-20,-40,-21,36,-52,-40,-55,2,-26,-49,-27,36,36,36,36,-5,-6,-7,-8,-9,-10,-11,-13,-14,36,-23,-24,-47,-56,36,-50,-28,-39,-37,-34,-51,-57,2,-35,36,]),'LITERAL':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,61,94,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,91,10,]),'OPEN_PAREN':([0,2,13,19,25,27,31,32,33,34,35,36,37,38,39,40,41,46,56,88,94,],[13,13,13,56,-42,61,13,13,13,13,13,13,13,13,13,13,13,13,13,-41,13,]),'PATH_SEP':([0,2,3,5,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,51,53,54,55,56,57,58,59,74,75,78,79,80,82,85,86,87,89,90,92,93,94,95,],[4,4,43,49,-43,-44,-45,-46,4,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,4,4,4,4,4,4,4,4,4,4,4,-48,4,49,-40,49,-52,-40,-55,4,-26,-49,-27,49,49,-23,-24,-47,-56,-50,-28,-39,-37,-34,-51,-57,4,-35,]),'ABBREV_PATH_SEP':([0,2,3,5,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,51,53,54,55,56,57,58,59,74,75,78,79,80,82,85,86,87,89,90,92,93,94,95,],[6,6,44,50,-43,-44,-45,-46,6,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,6,6,6,6,6,6,6,6,6,6,6,-48,6,50,-40,50,-52,-40,-55,6,-26,-49,-27,50,50,-23,-24,-47,-56,-50,-28,-39,-37,-34,-51,-57,6,-35,]),'DOLLAR':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'FLOAT':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'INTEGER':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ABBREV_STEP_SELF':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'ABBREV_STEP_PARENT':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'NCNAME':([0,2,4,6,13,15,21,29,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,60,62,77,81,94,],[24,24,48,48,24,54,48,-32,24,24,24,24,24,24,24,24,24,24,24,48,48,24,48,48,24,87,-31,87,87,24,]),'FUNCNAME':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,60,94,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,88,25,]),'NODETYPE':([0,2,4,6,13,21,29,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,62,94,],[27,27,27,27,27,27,-32,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-31,27,]),'AXISNAME':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ABBREV_AXIS_AT':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'STAR_OP':([0,2,4,6,13,21,29,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,60,62,77,94,],[30,30,30,30,30,30,-32,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,89,-31,89,30,]),'$end':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,85,86,87,89,90,92,93,95,],[0,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,-52,-40,-55,-26,-49,-27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-23,-24,-47,-56,-50,-28,-39,-37,-34,-51,-57,-35,]),'OR_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[31,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,31,-52,-40,-55,-26,-49,-27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,31,-23,-24,-47,-56,31,-50,-28,-39,-37,-34,-51,-57,-35,31,]),'AND_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[32,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,32,-52,-40,-55,-26,-49,-27,32,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,32,-23,-24,-47,-56,32,-50,-28,-39,-37,-34,-51,-57,-35,32,]),'EQUAL_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[33,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,33,-52,-40,-55,-26,-49,-27,33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,33,-23,-24,-47,-56,33,-50,-28,-39,-37,-34,-51,-57,-35,33,]),'REL_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[34,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,34,-52,-40,-55,-26,-49,-27,34,34,34,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,34,-23,-24,-47,-56,34,-50,-28,-39,-37,-34,-51,-57,-35,34,]),'PLUS_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[35,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,35,-52,-40,-55,-26,-49,-27,35,35,35,35,-5,-6,-7,-8,-9,-10,-11,-13,-14,35,-23,-24,-47,-56,35,-50,-28,-39,-37,-34,-51,-57,-35,35,]),'MULT_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[37,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,37,-52,-40,-55,-26,-49,-27,37,37,37,37,37,37,-7,-8,-9,-10,-11,-13,-14,37,-23,-24,-47,-56,37,-50,-28,-39,-37,-34,-51,-57,-35,37,]),'DIV_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[38,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,38,-52,-40,-55,-26,-49,-27,38,38,38,38,38,38,-7,-8,-9,-10,-11,-13,-14,38,-23,-24,-47,-56,38,-50,-28,-39,-37,-34,-51,-57,-35,38,]),'MOD_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[39,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,39,-52,-40,-55,-26,-49,-27,39,39,39,39,39,39,-7,-8,-9,-10,-11,-13,-14,39,-23,-24,-47,-56,39,-50,-28,-39,-37,-34,-51,-57,-35,39,]),'UNION_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[40,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,40,-48,-20,-40,-21,40,-52,-40,-55,-26,-49,-27,40,40,40,40,40,40,40,40,40,-10,-11,-13,-14,40,-23,-24,-47,-56,40,-50,-28,-39,-37,-34,-51,-57,-35,40,]),'INTERSECT_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,84,85,86,87,89,90,92,93,95,96,],[41,-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,41,-48,-20,-40,-21,41,-52,-40,-55,-26,-49,-27,41,41,41,41,41,41,41,41,41,41,-11,-13,-14,41,-23,-24,-47,-56,41,-50,-28,-39,-37,-34,-51,-57,-35,41,]),'CLOSE_PAREN':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,83,84,85,86,87,89,90,91,92,93,95,96,],[-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,80,-52,-40,-55,82,-26,-49,-27,90,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-23,-24,-47,-56,93,-58,-50,-28,-39,-37,-34,95,-51,-57,-35,-59,]),'CLOSE_BRACKET':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,85,86,87,89,90,92,93,95,],[-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,-52,-40,-55,-26,-49,-27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,92,-23,-24,-47,-56,-50,-28,-39,-37,-34,-51,-57,-35,]),'COMMA':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,42,45,47,48,51,53,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,83,84,85,86,87,89,90,92,93,95,96,],[-18,-19,-15,-16,-17,-43,-44,-45,-46,-22,-38,-53,-54,-25,-29,-30,-40,-33,-36,-12,-48,-20,-40,-21,-52,-40,-55,-26,-49,-27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-23,-24,-47,-56,94,-58,-50,-28,-39,-37,-34,-51,-57,-35,-59,]),'OPEN_BRACKET':([3,9,10,11,12,16,17,18,20,24,26,30,45,48,53,54,55,57,58,59,80,82,85,86,87,89,90,92,93,95,],[46,-43,-44,-45,-46,-38,-53,-54,46,-40,-33,-36,-48,-40,-52,-40,-55,46,-49,46,-47,-56,-50,46,-39,-37,-34,-51,-57,-35,]),'COLON':([24,48,54,],[60,77,81,]),'AXIS_SEP':([28,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Expr':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[1,42,52,63,64,65,66,67,68,69,70,71,72,73,76,84,96,]),'FilterExpr':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'RelativeLocationPath':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,56,94,],[5,5,47,51,5,5,5,5,5,5,5,5,5,5,5,5,74,75,5,5,5,]),'AbsoluteLocationPath':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'AbbreviatedAbsoluteLocationPath':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'VariableReference':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'Number':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FunctionCall':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'Step':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,78,79,14,14,]),'QName':([0,2,4,6,13,15,21,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[16,16,16,16,16,53,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FuncQName':([0,2,13,31,32,33,34,35,36,37,38,39,40,41,46,56,94,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NodeTest':([0,2,4,6,13,21,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[20,20,20,20,20,59,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'AxisSpecifier':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'NameTest':([0,2,4,6,13,21,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,50,56,94,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'Predicate':([3,20,57,59,86,],[45,58,85,58,85,]),'FormalArguments':([19,],[55,]),'PredicateList':([20,59,],[57,86,]),'ArgumentList':([56,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Expr","S'",1,None,None,None),
  ('Expr -> Expr OR_OP Expr','Expr',3,'p_expr_boolean','parserules.py',30),
  ('Expr -> Expr AND_OP Expr','Expr',3,'p_expr_boolean','parserules.py',31),
  ('Expr -> Expr EQUAL_OP Expr','Expr',3,'p_expr_boolean','parserules.py',32),
  ('Expr -> Expr REL_OP Expr','Expr',3,'p_expr_boolean','parserules.py',33),
  ('Expr -> Expr PLUS_OP Expr','Expr',3,'p_expr_boolean','parserules.py',34),
  ('Expr -> Expr MINUS_OP Expr','Expr',3,'p_expr_boolean','parserules.py',35),
  ('Expr -> Expr MULT_OP Expr','Expr',3,'p_expr_boolean','parserules.py',36),
  ('Expr -> Expr DIV_OP Expr','Expr',3,'p_expr_boolean','parserules.py',37),
  ('Expr -> Expr MOD_OP Expr','Expr',3,'p_expr_boolean','parserules.py',38),
  ('Expr -> Expr UNION_OP Expr','Expr',3,'p_expr_boolean','parserules.py',39),
  ('Expr -> Expr INTERSECT_OP Expr','Expr',3,'p_expr_boolean','parserules.py',40),
  ('Expr -> MINUS_OP Expr','Expr',2,'p_expr_unary','parserules.py',47),
  ('Expr -> FilterExpr PATH_SEP RelativeLocationPath','Expr',3,'p_path_expr_binary','parserules.py',58),
  ('Expr -> FilterExpr ABBREV_PATH_SEP RelativeLocationPath','Expr',3,'p_path_expr_binary','parserules.py',59),
  ('Expr -> RelativeLocationPath','Expr',1,'p_path_expr_unary','parserules.py',66),
  ('Expr -> AbsoluteLocationPath','Expr',1,'p_path_expr_unary','parserules.py',67),
  ('Expr -> AbbreviatedAbsoluteLocationPath','Expr',1,'p_path_expr_unary','parserules.py',68),
  ('Expr -> FilterExpr','Expr',1,'p_path_expr_unary','parserules.py',69),
  ('AbsoluteLocationPath -> PATH_SEP','AbsoluteLocationPath',1,'p_absolute_location_path_rootonly','parserules.py',80),
  ('AbsoluteLocationPath -> PATH_SEP RelativeLocationPath','AbsoluteLocationPath',2,'p_absolute_location_path_subpath','parserules.py',87),
  ('AbbreviatedAbsoluteLocationPath -> ABBREV_PATH_SEP RelativeLocationPath','AbbreviatedAbsoluteLocationPath',2,'p_abbreviated_absolute_location_path','parserules.py',94),
  ('RelativeLocationPath -> Step','RelativeLocationPath',1,'p_relative_location_path_simple','parserules.py',101),
  ('RelativeLocationPath -> RelativeLocationPath PATH_SEP Step','RelativeLocationPath',3,'p_relative_location_path_binary','parserules.py',108),
  ('RelativeLocationPath -> RelativeLocationPath ABBREV_PATH_SEP Step','RelativeLocationPath',3,'p_relative_location_path_binary','parserules.py',109),
  ('Step -> NodeTest','Step',1,'p_step_nodetest','parserules.py',120),
  ('Step -> NodeTest PredicateList','Step',2,'p_step_nodetest_predicates','parserules.py',127),
  ('Step -> AxisSpecifier NodeTest','Step',2,'p_step_axis_nodetest','parserules.py',134),
  ('Step -> AxisSpecifier NodeTest PredicateList','Step',3,'p_step_axis_nodetest_predicates','parserules.py',141),
  ('Step -> ABBREV_STEP_SELF','Step',1,'p_step_abbrev','parserules.py',148),
  ('Step -> ABBREV_STEP_PARENT','Step',1,'p_step_abbrev','parserules.py',149),
  ('AxisSpecifier -> AXISNAME AXIS_SEP','AxisSpecifier',2,'p_axis_specifier_full','parserules.py',160),
  ('AxisSpecifier -> ABBREV_AXIS_AT','AxisSpecifier',1,'p_axis_specifier_abbrev','parserules.py',167),
  ('NodeTest -> NameTest','NodeTest',1,'p_node_test_name_test','parserules.py',178),
  ('NodeTest -> NODETYPE OPEN_PAREN CLOSE_PAREN','NodeTest',3,'p_node_test_type_simple','parserules.py',185),
  ('NodeTest -> NODETYPE OPEN_PAREN LITERAL CLOSE_PAREN','NodeTest',4,'p_node_test_type_literal','parserules.py',195),
  ('NameTest -> STAR_OP','NameTest',1,'p_name_test_star','parserules.py',209),
  ('NameTest -> NCNAME COLON STAR_OP','NameTest',3,'p_name_test_prefix_star','parserules.py',216),
  ('NameTest -> QName','NameTest',1,'p_name_test_qname','parserules.py',223),
  ('QName -> NCNAME COLON NCNAME','QName',3,'p_qname_prefixed','parserules.py',235),
  ('QName -> NCNAME','QName',1,'p_qname_unprefixed','parserules.py',242),
  ('FuncQName -> NCNAME COLON FUNCNAME','FuncQName',3,'p_funcqname_prefixed','parserules.py',249),
  ('FuncQName -> FUNCNAME','FuncQName',1,'p_funcqname_unprefixed','parserules.py',256),
  ('FilterExpr -> VariableReference','FilterExpr',1,'p_filter_expr_simple','parserules.py',267),
  ('FilterExpr -> LITERAL','FilterExpr',1,'p_filter_expr_simple','parserules.py',268),
  ('FilterExpr -> Number','FilterExpr',1,'p_filter_expr_simple','parserules.py',269),
  ('FilterExpr -> FunctionCall','FilterExpr',1,'p_filter_expr_simple','parserules.py',270),
  ('FilterExpr -> OPEN_PAREN Expr CLOSE_PAREN','FilterExpr',3,'p_filter_expr_grouped','parserules.py',279),
  ('FilterExpr -> FilterExpr Predicate','FilterExpr',2,'p_filter_expr_predicate','parserules.py',286),
  ('PredicateList -> Predicate','PredicateList',1,'p_predicate_list_single','parserules.py',300),
  ('PredicateList -> PredicateList Predicate','PredicateList',2,'p_predicate_list_recursive','parserules.py',307),
  ('Predicate -> OPEN_BRACKET Expr CLOSE_BRACKET','Predicate',3,'p_predicate','parserules.py',315),
  ('VariableReference -> DOLLAR QName','VariableReference',2,'p_variable_reference','parserules.py',326),
  ('Number -> FLOAT','Number',1,'p_number','parserules.py',337),
  ('Number -> INTEGER','Number',1,'p_number','parserules.py',338),
  ('FunctionCall -> FuncQName FormalArguments','FunctionCall',2,'p_function_call','parserules.py',349),
  ('FormalArguments -> OPEN_PAREN CLOSE_PAREN','FormalArguments',2,'p_formal_arguments_empty','parserules.py',359),
  ('FormalArguments -> OPEN_PAREN ArgumentList CLOSE_PAREN','FormalArguments',3,'p_formal_arguments_list','parserules.py',366),
  ('ArgumentList -> Expr','ArgumentList',1,'p_argument_list_single','parserules.py',373),
  ('ArgumentList -> ArgumentList COMMA Expr','ArgumentList',3,'p_argument_list_recursive','parserules.py',380),
]
