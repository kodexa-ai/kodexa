
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_OPleftAND_OPleftEQUAL_OPleftREL_OPleftPLUS_OPMINUS_OPleftMULT_OPDIV_OPMOD_OPrightUMINUS_OPleftUNION_OPABBREV_AXIS_AT ABBREV_PATH_SEP ABBREV_STEP_PARENT ABBREV_STEP_SELF AND_OP AXISNAME AXIS_SEP CLOSE_BRACKET CLOSE_PAREN COLON COMMA DIV_OP DOLLAR EQUAL_OP FLOAT FUNCNAME INTEGER LITERAL MINUS_OP MOD_OP MULT_OP NCNAME NODETYPE OPEN_BRACKET OPEN_PAREN OR_OP PATH_SEP PLUS_OP REL_OP STAR_OP UNION_OP\n    Expr : Expr OR_OP Expr\n         | Expr AND_OP Expr\n         | Expr EQUAL_OP Expr\n         | Expr REL_OP Expr\n         | Expr PLUS_OP Expr\n         | Expr MINUS_OP Expr\n         | Expr MULT_OP Expr\n         | Expr DIV_OP Expr\n         | Expr MOD_OP Expr\n         | Expr UNION_OP Expr\n    \n    Expr : MINUS_OP Expr %prec UMINUS_OP\n    \n    Expr : FilterExpr PATH_SEP RelativeLocationPath\n         | FilterExpr ABBREV_PATH_SEP RelativeLocationPath\n    \n    Expr : RelativeLocationPath\n         | AbsoluteLocationPath\n         | AbbreviatedAbsoluteLocationPath\n         | FilterExpr\n    \n    AbsoluteLocationPath : PATH_SEP\n    \n    AbsoluteLocationPath : PATH_SEP RelativeLocationPath\n    \n    AbbreviatedAbsoluteLocationPath : ABBREV_PATH_SEP RelativeLocationPath\n    \n    RelativeLocationPath : Step\n    \n    RelativeLocationPath : RelativeLocationPath PATH_SEP Step\n                         | RelativeLocationPath ABBREV_PATH_SEP Step\n    \n    Step : NodeTest\n    \n    Step : NodeTest PredicateList\n    \n    Step : AxisSpecifier NodeTest\n    \n    Step : AxisSpecifier NodeTest PredicateList\n    \n    Step : ABBREV_STEP_SELF\n         | ABBREV_STEP_PARENT\n    \n    AxisSpecifier : AXISNAME AXIS_SEP\n    \n    AxisSpecifier : ABBREV_AXIS_AT\n    \n    NodeTest : NameTest\n    \n    NodeTest : NODETYPE OPEN_PAREN CLOSE_PAREN\n    \n    NodeTest : NODETYPE OPEN_PAREN LITERAL CLOSE_PAREN\n    \n    NameTest : STAR_OP\n    \n    NameTest : NCNAME COLON STAR_OP\n    \n    NameTest : QName\n    \n    QName : NCNAME COLON NCNAME\n    \n    QName : NCNAME\n    \n    FuncQName : NCNAME COLON FUNCNAME\n    \n    FuncQName : FUNCNAME\n    \n    FilterExpr : VariableReference\n               | LITERAL\n               | Number\n               | FunctionCall\n    \n    FilterExpr : OPEN_PAREN Expr CLOSE_PAREN\n    \n    FilterExpr : FilterExpr Predicate\n    \n    PredicateList : Predicate\n    \n    PredicateList : PredicateList Predicate\n    \n    Predicate : OPEN_BRACKET Expr CLOSE_BRACKET\n    \n    VariableReference : DOLLAR QName\n    \n    Number : FLOAT\n           | INTEGER\n    \n    FunctionCall : FuncQName FormalArguments\n    \n    FormalArguments : OPEN_PAREN CLOSE_PAREN\n    \n    FormalArguments : OPEN_PAREN ArgumentList CLOSE_PAREN\n    \n    ArgumentList : Expr\n    \n    ArgumentList : ArgumentList COMMA Expr\n    '
    
_lr_action_items = {'MINUS_OP':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,92,93,94,],[2,36,2,-17,-18,-14,-15,-16,-42,-43,-44,-45,2,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,2,2,2,2,2,2,2,2,2,2,-11,-47,2,-19,-39,-20,36,-51,-39,-54,2,-25,-48,-26,36,36,36,36,-5,-6,-7,-8,-9,-10,-12,-13,36,-22,-23,-46,-55,36,-49,-27,-38,-36,-33,-50,-56,2,-34,36,]),'LITERAL':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,60,92,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,89,10,]),'OPEN_PAREN':([0,2,13,19,25,27,31,32,33,34,35,36,37,38,39,40,45,55,86,92,],[13,13,13,55,-41,60,13,13,13,13,13,13,13,13,13,13,13,13,-40,13,]),'PATH_SEP':([0,2,3,5,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,50,52,53,54,55,56,57,58,72,73,76,77,78,80,83,84,85,87,88,90,91,92,93,],[4,4,42,48,-42,-43,-44,-45,4,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,4,4,4,4,4,4,4,4,4,4,-47,4,48,-39,48,-51,-39,-54,4,-25,-48,-26,48,48,-22,-23,-46,-55,-49,-27,-38,-36,-33,-50,-56,4,-34,]),'ABBREV_PATH_SEP':([0,2,3,5,9,10,11,12,13,14,16,17,18,20,22,23,24,26,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,50,52,53,54,55,56,57,58,72,73,76,77,78,80,83,84,85,87,88,90,91,92,93,],[6,6,43,49,-42,-43,-44,-45,6,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,6,6,6,6,6,6,6,6,6,6,-47,6,49,-39,49,-51,-39,-54,6,-25,-48,-26,49,49,-22,-23,-46,-55,-49,-27,-38,-36,-33,-50,-56,6,-34,]),'DOLLAR':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'FLOAT':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'INTEGER':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ABBREV_STEP_SELF':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'ABBREV_STEP_PARENT':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'NCNAME':([0,2,4,6,13,15,21,29,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,59,61,75,79,92,],[24,24,47,47,24,53,47,-31,24,24,24,24,24,24,24,24,24,24,47,47,24,47,47,24,85,-30,85,85,24,]),'FUNCNAME':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,59,92,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,86,25,]),'NODETYPE':([0,2,4,6,13,21,29,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,61,92,],[27,27,27,27,27,27,-31,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-30,27,]),'AXISNAME':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ABBREV_AXIS_AT':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'STAR_OP':([0,2,4,6,13,21,29,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,59,61,75,92,],[30,30,30,30,30,30,-31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,87,-30,87,30,]),'$end':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,80,83,84,85,87,88,90,91,93,],[0,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,-51,-39,-54,-25,-48,-26,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,-22,-23,-46,-55,-49,-27,-38,-36,-33,-50,-56,-34,]),'OR_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[31,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,31,-51,-39,-54,-25,-48,-26,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,31,-22,-23,-46,-55,31,-49,-27,-38,-36,-33,-50,-56,-34,31,]),'AND_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[32,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,32,-51,-39,-54,-25,-48,-26,32,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,32,-22,-23,-46,-55,32,-49,-27,-38,-36,-33,-50,-56,-34,32,]),'EQUAL_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[33,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,33,-51,-39,-54,-25,-48,-26,33,33,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,33,-22,-23,-46,-55,33,-49,-27,-38,-36,-33,-50,-56,-34,33,]),'REL_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[34,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,34,-51,-39,-54,-25,-48,-26,34,34,34,-4,-5,-6,-7,-8,-9,-10,-12,-13,34,-22,-23,-46,-55,34,-49,-27,-38,-36,-33,-50,-56,-34,34,]),'PLUS_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[35,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,35,-51,-39,-54,-25,-48,-26,35,35,35,35,-5,-6,-7,-8,-9,-10,-12,-13,35,-22,-23,-46,-55,35,-49,-27,-38,-36,-33,-50,-56,-34,35,]),'MULT_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[37,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,37,-51,-39,-54,-25,-48,-26,37,37,37,37,37,37,-7,-8,-9,-10,-12,-13,37,-22,-23,-46,-55,37,-49,-27,-38,-36,-33,-50,-56,-34,37,]),'DIV_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[38,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,38,-51,-39,-54,-25,-48,-26,38,38,38,38,38,38,-7,-8,-9,-10,-12,-13,38,-22,-23,-46,-55,38,-49,-27,-38,-36,-33,-50,-56,-34,38,]),'MOD_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[39,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,39,-51,-39,-54,-25,-48,-26,39,39,39,39,39,39,-7,-8,-9,-10,-12,-13,39,-22,-23,-46,-55,39,-49,-27,-38,-36,-33,-50,-56,-34,39,]),'UNION_OP':([1,3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,87,88,90,91,93,94,],[40,-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,40,-47,-19,-39,-20,40,-51,-39,-54,-25,-48,-26,40,40,40,40,40,40,40,40,40,-10,-12,-13,40,-22,-23,-46,-55,40,-49,-27,-38,-36,-33,-50,-56,-34,40,]),'CLOSE_PAREN':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,80,81,82,83,84,85,87,88,89,90,91,93,94,],[-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,78,-51,-39,-54,80,-25,-48,-26,88,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,-22,-23,-46,-55,91,-57,-49,-27,-38,-36,-33,93,-50,-56,-34,-58,]),'CLOSE_BRACKET':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,83,84,85,87,88,90,91,93,],[-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,-51,-39,-54,-25,-48,-26,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,90,-22,-23,-46,-55,-49,-27,-38,-36,-33,-50,-56,-34,]),'COMMA':([3,4,5,7,8,9,10,11,12,14,16,17,18,20,22,23,24,26,30,41,44,46,47,50,52,53,54,56,57,58,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,80,81,82,83,84,85,87,88,90,91,93,94,],[-17,-18,-14,-15,-16,-42,-43,-44,-45,-21,-37,-52,-53,-24,-28,-29,-39,-32,-35,-11,-47,-19,-39,-20,-51,-39,-54,-25,-48,-26,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-12,-13,-22,-23,-46,-55,92,-57,-49,-27,-38,-36,-33,-50,-56,-34,-58,]),'OPEN_BRACKET':([3,9,10,11,12,16,17,18,20,24,26,30,44,47,52,53,54,56,57,58,78,80,83,84,85,87,88,90,91,93,],[45,-42,-43,-44,-45,-37,-52,-53,45,-39,-32,-35,-47,-39,-51,-39,-54,45,-48,45,-46,-55,-49,45,-38,-36,-33,-50,-56,-34,]),'COLON':([24,47,53,],[59,75,79,]),'AXIS_SEP':([28,],[61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Expr':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[1,41,51,62,63,64,65,66,67,68,69,70,71,74,82,94,]),'FilterExpr':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'RelativeLocationPath':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,55,92,],[5,5,46,50,5,5,5,5,5,5,5,5,5,5,5,72,73,5,5,5,]),'AbsoluteLocationPath':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'AbbreviatedAbsoluteLocationPath':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'VariableReference':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'Number':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FunctionCall':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'Step':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,76,77,14,14,]),'QName':([0,2,4,6,13,15,21,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[16,16,16,16,16,52,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FuncQName':([0,2,13,31,32,33,34,35,36,37,38,39,40,45,55,92,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NodeTest':([0,2,4,6,13,21,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[20,20,20,20,20,58,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'AxisSpecifier':([0,2,4,6,13,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'NameTest':([0,2,4,6,13,21,31,32,33,34,35,36,37,38,39,40,42,43,45,48,49,55,92,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'Predicate':([3,20,56,58,84,],[44,57,83,57,83,]),'FormalArguments':([19,],[54,]),'PredicateList':([20,58,],[56,84,]),'ArgumentList':([55,],[81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Expr","S'",1,None,None,None),
  ('Expr -> Expr OR_OP Expr','Expr',3,'p_expr_boolean','parserules.py',29),
  ('Expr -> Expr AND_OP Expr','Expr',3,'p_expr_boolean','parserules.py',30),
  ('Expr -> Expr EQUAL_OP Expr','Expr',3,'p_expr_boolean','parserules.py',31),
  ('Expr -> Expr REL_OP Expr','Expr',3,'p_expr_boolean','parserules.py',32),
  ('Expr -> Expr PLUS_OP Expr','Expr',3,'p_expr_boolean','parserules.py',33),
  ('Expr -> Expr MINUS_OP Expr','Expr',3,'p_expr_boolean','parserules.py',34),
  ('Expr -> Expr MULT_OP Expr','Expr',3,'p_expr_boolean','parserules.py',35),
  ('Expr -> Expr DIV_OP Expr','Expr',3,'p_expr_boolean','parserules.py',36),
  ('Expr -> Expr MOD_OP Expr','Expr',3,'p_expr_boolean','parserules.py',37),
  ('Expr -> Expr UNION_OP Expr','Expr',3,'p_expr_boolean','parserules.py',38),
  ('Expr -> MINUS_OP Expr','Expr',2,'p_expr_unary','parserules.py',45),
  ('Expr -> FilterExpr PATH_SEP RelativeLocationPath','Expr',3,'p_path_expr_binary','parserules.py',56),
  ('Expr -> FilterExpr ABBREV_PATH_SEP RelativeLocationPath','Expr',3,'p_path_expr_binary','parserules.py',57),
  ('Expr -> RelativeLocationPath','Expr',1,'p_path_expr_unary','parserules.py',64),
  ('Expr -> AbsoluteLocationPath','Expr',1,'p_path_expr_unary','parserules.py',65),
  ('Expr -> AbbreviatedAbsoluteLocationPath','Expr',1,'p_path_expr_unary','parserules.py',66),
  ('Expr -> FilterExpr','Expr',1,'p_path_expr_unary','parserules.py',67),
  ('AbsoluteLocationPath -> PATH_SEP','AbsoluteLocationPath',1,'p_absolute_location_path_rootonly','parserules.py',78),
  ('AbsoluteLocationPath -> PATH_SEP RelativeLocationPath','AbsoluteLocationPath',2,'p_absolute_location_path_subpath','parserules.py',85),
  ('AbbreviatedAbsoluteLocationPath -> ABBREV_PATH_SEP RelativeLocationPath','AbbreviatedAbsoluteLocationPath',2,'p_abbreviated_absolute_location_path','parserules.py',92),
  ('RelativeLocationPath -> Step','RelativeLocationPath',1,'p_relative_location_path_simple','parserules.py',99),
  ('RelativeLocationPath -> RelativeLocationPath PATH_SEP Step','RelativeLocationPath',3,'p_relative_location_path_binary','parserules.py',106),
  ('RelativeLocationPath -> RelativeLocationPath ABBREV_PATH_SEP Step','RelativeLocationPath',3,'p_relative_location_path_binary','parserules.py',107),
  ('Step -> NodeTest','Step',1,'p_step_nodetest','parserules.py',118),
  ('Step -> NodeTest PredicateList','Step',2,'p_step_nodetest_predicates','parserules.py',125),
  ('Step -> AxisSpecifier NodeTest','Step',2,'p_step_axis_nodetest','parserules.py',132),
  ('Step -> AxisSpecifier NodeTest PredicateList','Step',3,'p_step_axis_nodetest_predicates','parserules.py',139),
  ('Step -> ABBREV_STEP_SELF','Step',1,'p_step_abbrev','parserules.py',146),
  ('Step -> ABBREV_STEP_PARENT','Step',1,'p_step_abbrev','parserules.py',147),
  ('AxisSpecifier -> AXISNAME AXIS_SEP','AxisSpecifier',2,'p_axis_specifier_full','parserules.py',158),
  ('AxisSpecifier -> ABBREV_AXIS_AT','AxisSpecifier',1,'p_axis_specifier_abbrev','parserules.py',165),
  ('NodeTest -> NameTest','NodeTest',1,'p_node_test_name_test','parserules.py',176),
  ('NodeTest -> NODETYPE OPEN_PAREN CLOSE_PAREN','NodeTest',3,'p_node_test_type_simple','parserules.py',183),
  ('NodeTest -> NODETYPE OPEN_PAREN LITERAL CLOSE_PAREN','NodeTest',4,'p_node_test_type_literal','parserules.py',193),
  ('NameTest -> STAR_OP','NameTest',1,'p_name_test_star','parserules.py',207),
  ('NameTest -> NCNAME COLON STAR_OP','NameTest',3,'p_name_test_prefix_star','parserules.py',214),
  ('NameTest -> QName','NameTest',1,'p_name_test_qname','parserules.py',221),
  ('QName -> NCNAME COLON NCNAME','QName',3,'p_qname_prefixed','parserules.py',233),
  ('QName -> NCNAME','QName',1,'p_qname_unprefixed','parserules.py',240),
  ('FuncQName -> NCNAME COLON FUNCNAME','FuncQName',3,'p_funcqname_prefixed','parserules.py',247),
  ('FuncQName -> FUNCNAME','FuncQName',1,'p_funcqname_unprefixed','parserules.py',254),
  ('FilterExpr -> VariableReference','FilterExpr',1,'p_filter_expr_simple','parserules.py',265),
  ('FilterExpr -> LITERAL','FilterExpr',1,'p_filter_expr_simple','parserules.py',266),
  ('FilterExpr -> Number','FilterExpr',1,'p_filter_expr_simple','parserules.py',267),
  ('FilterExpr -> FunctionCall','FilterExpr',1,'p_filter_expr_simple','parserules.py',268),
  ('FilterExpr -> OPEN_PAREN Expr CLOSE_PAREN','FilterExpr',3,'p_filter_expr_grouped','parserules.py',277),
  ('FilterExpr -> FilterExpr Predicate','FilterExpr',2,'p_filter_expr_predicate','parserules.py',284),
  ('PredicateList -> Predicate','PredicateList',1,'p_predicate_list_single','parserules.py',298),
  ('PredicateList -> PredicateList Predicate','PredicateList',2,'p_predicate_list_recursive','parserules.py',305),
  ('Predicate -> OPEN_BRACKET Expr CLOSE_BRACKET','Predicate',3,'p_predicate','parserules.py',313),
  ('VariableReference -> DOLLAR QName','VariableReference',2,'p_variable_reference','parserules.py',324),
  ('Number -> FLOAT','Number',1,'p_number','parserules.py',335),
  ('Number -> INTEGER','Number',1,'p_number','parserules.py',336),
  ('FunctionCall -> FuncQName FormalArguments','FunctionCall',2,'p_function_call','parserules.py',347),
  ('FormalArguments -> OPEN_PAREN CLOSE_PAREN','FormalArguments',2,'p_formal_arguments_empty','parserules.py',357),
  ('FormalArguments -> OPEN_PAREN ArgumentList CLOSE_PAREN','FormalArguments',3,'p_formal_arguments_list','parserules.py',364),
  ('ArgumentList -> Expr','ArgumentList',1,'p_argument_list_single','parserules.py',371),
  ('ArgumentList -> ArgumentList COMMA Expr','ArgumentList',3,'p_argument_list_recursive','parserules.py',378),
]
