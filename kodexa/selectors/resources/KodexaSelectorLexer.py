# Generated from resources/KodexaSelector.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,312,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,15,
        126,8,15,1,16,1,16,1,16,1,16,1,16,3,16,133,8,16,1,17,1,17,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,241,
        8,25,1,26,1,26,5,26,245,8,26,10,26,12,26,248,9,26,1,26,1,26,1,26,
        5,26,253,8,26,10,26,12,26,256,9,26,1,26,3,26,259,8,26,1,27,4,27,
        262,8,27,11,27,12,27,263,1,27,1,27,5,27,268,8,27,10,27,12,27,271,
        9,27,1,27,1,27,4,27,275,8,27,11,27,12,27,276,3,27,279,8,27,1,28,
        4,28,282,8,28,11,28,12,28,283,1,29,1,29,5,29,288,8,29,10,29,12,29,
        291,9,29,1,30,1,30,1,31,1,31,1,32,3,32,298,8,32,1,33,1,33,3,33,302,
        8,33,1,34,1,34,1,35,4,35,307,8,35,11,35,12,35,308,1,35,1,35,0,0,
        36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,
        0,71,33,1,0,7,2,0,60,60,62,62,1,0,34,34,1,0,39,39,14,0,65,90,95,
        95,97,122,192,214,216,246,248,767,880,893,895,8191,8204,8205,8304,
        8591,11264,12271,12289,55295,63744,64975,65008,65533,5,0,45,46,48,
        57,183,183,768,879,8255,8256,1,0,48,57,3,0,9,10,13,13,32,32,331,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,76,1,0,0,0,5,80,
        1,0,0,0,7,90,1,0,0,0,9,97,1,0,0,0,11,99,1,0,0,0,13,102,1,0,0,0,15,
        104,1,0,0,0,17,107,1,0,0,0,19,110,1,0,0,0,21,112,1,0,0,0,23,114,
        1,0,0,0,25,116,1,0,0,0,27,118,1,0,0,0,29,120,1,0,0,0,31,125,1,0,
        0,0,33,132,1,0,0,0,35,134,1,0,0,0,37,136,1,0,0,0,39,138,1,0,0,0,
        41,140,1,0,0,0,43,142,1,0,0,0,45,144,1,0,0,0,47,146,1,0,0,0,49,151,
        1,0,0,0,51,240,1,0,0,0,53,258,1,0,0,0,55,278,1,0,0,0,57,281,1,0,
        0,0,59,285,1,0,0,0,61,292,1,0,0,0,63,294,1,0,0,0,65,297,1,0,0,0,
        67,301,1,0,0,0,69,303,1,0,0,0,71,306,1,0,0,0,73,74,5,111,0,0,74,
        75,5,114,0,0,75,2,1,0,0,0,76,77,5,97,0,0,77,78,5,110,0,0,78,79,5,
        100,0,0,79,4,1,0,0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,83,5,116,
        0,0,83,84,5,101,0,0,84,85,5,114,0,0,85,86,5,115,0,0,86,87,5,101,
        0,0,87,88,5,99,0,0,88,89,5,116,0,0,89,6,1,0,0,0,90,91,5,115,0,0,
        91,92,5,116,0,0,92,93,5,114,0,0,93,94,5,101,0,0,94,95,5,97,0,0,95,
        96,5,109,0,0,96,8,1,0,0,0,97,98,5,47,0,0,98,10,1,0,0,0,99,100,5,
        47,0,0,100,101,5,47,0,0,101,12,1,0,0,0,102,103,5,46,0,0,103,14,1,
        0,0,0,104,105,5,46,0,0,105,106,5,46,0,0,106,16,1,0,0,0,107,108,5,
        58,0,0,108,109,5,58,0,0,109,18,1,0,0,0,110,111,5,64,0,0,111,20,1,
        0,0,0,112,113,5,40,0,0,113,22,1,0,0,0,114,115,5,41,0,0,115,24,1,
        0,0,0,116,117,5,91,0,0,117,26,1,0,0,0,118,119,5,93,0,0,119,28,1,
        0,0,0,120,121,5,124,0,0,121,30,1,0,0,0,122,123,5,33,0,0,123,126,
        5,61,0,0,124,126,5,61,0,0,125,122,1,0,0,0,125,124,1,0,0,0,126,32,
        1,0,0,0,127,128,5,60,0,0,128,133,5,61,0,0,129,130,5,62,0,0,130,133,
        5,61,0,0,131,133,7,0,0,0,132,127,1,0,0,0,132,129,1,0,0,0,132,131,
        1,0,0,0,133,34,1,0,0,0,134,135,5,43,0,0,135,36,1,0,0,0,136,137,5,
        45,0,0,137,38,1,0,0,0,138,139,5,42,0,0,139,40,1,0,0,0,140,141,5,
        44,0,0,141,42,1,0,0,0,142,143,5,58,0,0,143,44,1,0,0,0,144,145,5,
        36,0,0,145,46,1,0,0,0,146,147,5,116,0,0,147,148,5,114,0,0,148,149,
        5,117,0,0,149,150,5,101,0,0,150,48,1,0,0,0,151,152,5,102,0,0,152,
        153,5,97,0,0,153,154,5,108,0,0,154,155,5,115,0,0,155,156,5,101,0,
        0,156,50,1,0,0,0,157,158,5,99,0,0,158,159,5,111,0,0,159,160,5,110,
        0,0,160,161,5,116,0,0,161,162,5,101,0,0,162,163,5,110,0,0,163,164,
        5,116,0,0,164,165,5,82,0,0,165,166,5,101,0,0,166,167,5,103,0,0,167,
        168,5,101,0,0,168,241,5,120,0,0,169,170,5,116,0,0,170,171,5,121,
        0,0,171,172,5,112,0,0,172,173,5,101,0,0,173,174,5,82,0,0,174,175,
        5,101,0,0,175,176,5,103,0,0,176,177,5,101,0,0,177,241,5,120,0,0,
        178,179,5,116,0,0,179,180,5,97,0,0,180,181,5,103,0,0,181,182,5,82,
        0,0,182,183,5,101,0,0,183,184,5,103,0,0,184,185,5,101,0,0,185,241,
        5,120,0,0,186,187,5,104,0,0,187,188,5,97,0,0,188,189,5,115,0,0,189,
        190,5,84,0,0,190,191,5,97,0,0,191,241,5,103,0,0,192,193,5,104,0,
        0,193,194,5,97,0,0,194,195,5,115,0,0,195,196,5,70,0,0,196,197,5,
        101,0,0,197,198,5,97,0,0,198,199,5,116,0,0,199,200,5,117,0,0,200,
        201,5,114,0,0,201,241,5,101,0,0,202,203,5,104,0,0,203,204,5,97,0,
        0,204,205,5,115,0,0,205,206,5,70,0,0,206,207,5,101,0,0,207,208,5,
        97,0,0,208,209,5,116,0,0,209,210,5,117,0,0,210,211,5,114,0,0,211,
        212,5,101,0,0,212,213,5,86,0,0,213,214,5,97,0,0,214,215,5,108,0,
        0,215,216,5,117,0,0,216,241,5,101,0,0,217,218,5,99,0,0,218,219,5,
        111,0,0,219,220,5,110,0,0,220,221,5,116,0,0,221,222,5,101,0,0,222,
        223,5,110,0,0,223,241,5,116,0,0,224,225,5,105,0,0,225,241,5,100,
        0,0,226,227,5,110,0,0,227,228,5,111,0,0,228,229,5,100,0,0,229,230,
        5,101,0,0,230,231,5,95,0,0,231,232,5,116,0,0,232,233,5,121,0,0,233,
        234,5,112,0,0,234,241,5,101,0,0,235,236,5,105,0,0,236,237,5,110,
        0,0,237,238,5,100,0,0,238,239,5,101,0,0,239,241,5,120,0,0,240,157,
        1,0,0,0,240,169,1,0,0,0,240,178,1,0,0,0,240,186,1,0,0,0,240,192,
        1,0,0,0,240,202,1,0,0,0,240,217,1,0,0,0,240,224,1,0,0,0,240,226,
        1,0,0,0,240,235,1,0,0,0,241,52,1,0,0,0,242,246,5,34,0,0,243,245,
        8,1,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,
        1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,259,5,34,0,0,250,254,
        5,39,0,0,251,253,8,2,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,
        1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,259,
        5,39,0,0,258,242,1,0,0,0,258,250,1,0,0,0,259,54,1,0,0,0,260,262,
        3,69,34,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,
        1,0,0,0,264,265,1,0,0,0,265,269,5,46,0,0,266,268,3,69,34,0,267,266,
        1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,279,
        1,0,0,0,271,269,1,0,0,0,272,274,5,46,0,0,273,275,3,69,34,0,274,273,
        1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,
        1,0,0,0,278,261,1,0,0,0,278,272,1,0,0,0,279,56,1,0,0,0,280,282,3,
        69,34,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,
        1,0,0,0,284,58,1,0,0,0,285,289,3,65,32,0,286,288,3,67,33,0,287,286,
        1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,60,1,
        0,0,0,291,289,1,0,0,0,292,293,3,59,29,0,293,62,1,0,0,0,294,295,3,
        59,29,0,295,64,1,0,0,0,296,298,7,3,0,0,297,296,1,0,0,0,298,66,1,
        0,0,0,299,302,3,65,32,0,300,302,7,4,0,0,301,299,1,0,0,0,301,300,
        1,0,0,0,302,68,1,0,0,0,303,304,7,5,0,0,304,70,1,0,0,0,305,307,7,
        6,0,0,306,305,1,0,0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,1,
        0,0,0,309,310,1,0,0,0,310,311,6,35,0,0,311,72,1,0,0,0,16,0,125,132,
        240,246,254,258,263,269,276,278,283,289,297,301,308,1,6,0,0
    ]

class KodexaSelectorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OR = 1
    AND = 2
    INTERSECT = 3
    PIPELINE = 4
    PATH_SEP = 5
    ABBREV_PATH_SEP = 6
    ABBREV_STEP_SELF = 7
    ABBREV_STEP_PARENT = 8
    AXIS_SEP = 9
    ABBREV_AXIS_AT = 10
    LPAREN = 11
    RPAREN = 12
    LBRACKET = 13
    RBRACKET = 14
    UNION = 15
    EQUALS = 16
    REL_OP = 17
    PLUS = 18
    MINUS = 19
    STAR = 20
    COMMA = 21
    COLON = 22
    DOLLAR = 23
    TRUE = 24
    FALSE = 25
    FUNCTION_NAME = 26
    LITERAL = 27
    FLOAT = 28
    INTEGER = 29
    NCNAME = 30
    FUNCNAME = 31
    AXISNAME = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'or'", "'and'", "'intersect'", "'stream'", "'/'", "'//'", "'.'", 
            "'..'", "'::'", "'@'", "'('", "')'", "'['", "']'", "'|'", "'+'", 
            "'-'", "'*'", "','", "':'", "'$'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "OR", "AND", "INTERSECT", "PIPELINE", "PATH_SEP", "ABBREV_PATH_SEP", 
            "ABBREV_STEP_SELF", "ABBREV_STEP_PARENT", "AXIS_SEP", "ABBREV_AXIS_AT", 
            "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "UNION", "EQUALS", 
            "REL_OP", "PLUS", "MINUS", "STAR", "COMMA", "COLON", "DOLLAR", 
            "TRUE", "FALSE", "FUNCTION_NAME", "LITERAL", "FLOAT", "INTEGER", 
            "NCNAME", "FUNCNAME", "AXISNAME", "WS" ]

    ruleNames = [ "OR", "AND", "INTERSECT", "PIPELINE", "PATH_SEP", "ABBREV_PATH_SEP", 
                  "ABBREV_STEP_SELF", "ABBREV_STEP_PARENT", "AXIS_SEP", 
                  "ABBREV_AXIS_AT", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
                  "UNION", "EQUALS", "REL_OP", "PLUS", "MINUS", "STAR", 
                  "COMMA", "COLON", "DOLLAR", "TRUE", "FALSE", "FUNCTION_NAME", 
                  "LITERAL", "FLOAT", "INTEGER", "NCNAME", "FUNCNAME", "AXISNAME", 
                  "NameStartChar", "NameChar", "DIGIT", "WS" ]

    grammarFileName = "KodexaSelector.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


