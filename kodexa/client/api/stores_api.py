"""
    Kodexa

    Rethink how you work with documents  # noqa: E501

    The version of the OpenAPI document: 4.0.173
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kodexa.client.api_client import ApiClient, Endpoint as _Endpoint
from kodexa.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kodexa.client.model.bulk_delete import BulkDelete
from kodexa.client.model.bulk_lock import BulkLock
from kodexa.client.model.document_family import DocumentFamily
from kodexa.client.model.inline_object import InlineObject
from kodexa.client.model.inline_object1 import InlineObject1
from kodexa.client.model.inline_object2 import InlineObject2
from kodexa.client.model.page_document_family import PageDocumentFamily
from kodexa.client.model.page_store import PageStore
from kodexa.client.model.page_stored_row import PageStoredRow
from kodexa.client.model.platform_event import PlatformEvent
from kodexa.client.model.query_context import QueryContext
from kodexa.client.model.reprocess_request import ReprocessRequest
from kodexa.client.model.search_content import SearchContent
from kodexa.client.model.store import Store
from kodexa.client.model.stored_row import StoredRow
from kodexa.client.model.taxonomy import Taxonomy
from kodexa.client.model.unknownbasetype import UNKNOWNBASETYPE


class StoresApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __bulk_set_lock(
            self,
            org_slug,
            slug,
            bulk_lock,
            **kwargs
        ):
            """bulk_set_lock  # noqa: E501

            Bulk set the lock on a list of document families  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_set_lock(org_slug, slug, bulk_lock, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                bulk_lock (BulkLock):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['bulk_lock'] = \
                bulk_lock
            return self.call_with_http_info(**kwargs)

        self.bulk_set_lock = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'bulk_set_lock',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'bulk_lock',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'bulk_lock',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'bulk_lock':
                        (BulkLock,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'bulk_lock': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_set_lock
        )

        def __bulk_set_lock_with_version(
            self,
            org_slug,
            slug,
            version,
            bulk_lock,
            **kwargs
        ):
            """bulk_set_lock_with_version  # noqa: E501

            Bulk set the lock on a list of document families  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_set_lock_with_version(org_slug, slug, version, bulk_lock, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                bulk_lock (BulkLock):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['bulk_lock'] = \
                bulk_lock
            return self.call_with_http_info(**kwargs)

        self.bulk_set_lock_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'bulk_set_lock_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_lock',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_lock',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'bulk_lock':
                        (BulkLock,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'bulk_lock': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_set_lock_with_version
        )

        def __create_overlay(
            self,
            org_slug,
            slug,
            version,
            id,
            object_id,
            **kwargs
        ):
            """create_overlay  # noqa: E501

            Create a new overlay on a content object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_overlay(org_slug, slug, version, id, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                object_id (str):

            Keyword Args:
                inline_object2 (InlineObject2): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.create_overlay = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/overlays',
                'operation_id': 'create_overlay',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'inline_object2',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'object_id':
                        (str,),
                    'inline_object2':
                        (InlineObject2,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'object_id': 'path',
                    'inline_object2': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_overlay
        )

        def __create_rows(
            self,
            org_slug,
            slug,
            stored_row,
            **kwargs
        ):
            """create_rows  # noqa: E501

            Add rows to the the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_rows(org_slug, slug, stored_row, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                stored_row ([StoredRow]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['stored_row'] = \
                stored_row
            return self.call_with_http_info(**kwargs)

        self.create_rows = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/rows',
                'operation_id': 'create_rows',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'stored_row',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'stored_row',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'stored_row':
                        ([StoredRow],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'stored_row': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_rows
        )

        def __create_rows_for_version(
            self,
            org_slug,
            slug,
            version,
            stored_row,
            **kwargs
        ):
            """create_rows_for_version  # noqa: E501

            Add a list of rows to a specific version of the store (import mode)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_rows_for_version(org_slug, slug, version, stored_row, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                stored_row ([StoredRow]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['stored_row'] = \
                stored_row
            return self.call_with_http_info(**kwargs)

        self.create_rows_for_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/rows',
                'operation_id': 'create_rows_for_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'stored_row',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'stored_row',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'stored_row':
                        ([StoredRow],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'stored_row': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_rows_for_version
        )

        def __create_store(
            self,
            organization_slug,
            store,
            **kwargs
        ):
            """create_store  # noqa: E501

            Create a new instance of the object in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_store(organization_slug, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.create_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}',
                'operation_id': 'create_store',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_store
        )

        def __delete_content_object_with_version(
            self,
            org_slug,
            slug,
            version,
            document_family_id,
            id,
            **kwargs
        ):
            """delete_content_object_with_version  # noqa: E501

            Delete specific content object from document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_content_object_with_version(org_slug, slug, version, document_family_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                document_family_id (str):
                id (str):

            Keyword Args:
                group_lineage (str): [optional] if omitted the server will use the default value of "false"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_content_object_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects/{id}',
                'operation_id': 'delete_content_object_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                    'group_lineage',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'id':
                        (str,),
                    'group_lineage':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'document_family_id': 'documentFamilyId',
                    'id': 'id',
                    'group_lineage': 'groupLineage',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'document_family_id': 'path',
                    'id': 'path',
                    'group_lineage': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_content_object_with_version
        )

        def __delete_content_objects_with_version(
            self,
            org_slug,
            slug,
            version,
            bulk_delete,
            **kwargs
        ):
            """delete_content_objects_with_version  # noqa: E501

            Bulk delete a set of document families the specified version  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_content_objects_with_version(org_slug, slug, version, bulk_delete, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                bulk_delete (BulkDelete):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['bulk_delete'] = \
                bulk_delete
            return self.call_with_http_info(**kwargs)

        self.delete_content_objects_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'delete_content_objects_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_delete',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_delete',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'bulk_delete':
                        (BulkDelete,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'bulk_delete': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_content_objects_with_version
        )

        def __delete_families(
            self,
            org_slug,
            slug,
            bulk_delete,
            **kwargs
        ):
            """delete_families  # noqa: E501

            Bulk delete a set of document families in the current version  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_families(org_slug, slug, bulk_delete, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                bulk_delete (BulkDelete):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['bulk_delete'] = \
                bulk_delete
            return self.call_with_http_info(**kwargs)

        self.delete_families = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'delete_families',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'bulk_delete',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'bulk_delete',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'bulk_delete':
                        (BulkDelete,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'bulk_delete': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_families
        )

        def __delete_family_by_id(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """delete_family_by_id  # noqa: E501

            Delete a specific document family in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_id(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_id = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}',
                'operation_id': 'delete_family_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_id
        )

        def __delete_family_by_path(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """delete_family_by_path  # noqa: E501

            Delete document family by path in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_path(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_path = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'delete_family_by_path',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_path
        )

        def __delete_family_by_path_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_family_by_path_with_version  # noqa: E501

            Delete document family by path in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_path_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_path_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'delete_family_by_path_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_path_with_version
        )

        def __delete_family_id_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """delete_family_id_with_version  # noqa: E501

            Delete a specific document family in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_id_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_family_id_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'delete_family_id_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_id_with_version
        )

        def __delete_rows(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """delete_rows  # noqa: E501

            Delete the rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_rows(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_rows = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/rows',
                'operation_id': 'delete_rows',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_rows
        )

        def __delete_rows_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_rows_with_version  # noqa: E501

            Delete the rows from a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_rows_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_rows_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/rows',
                'operation_id': 'delete_rows_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_rows_with_version
        )

        def __delete_store(
            self,
            organization_slug,
            slug,
            **kwargs
        ):
            """delete_store  # noqa: E501

            Delete the current version of the given object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_store(organization_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_store = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'delete_store',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_store
        )

        def __delete_version_store(
            self,
            organization_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_version_store  # noqa: E501

            Delete the specified version of the given object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_version_store(organization_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_version_store = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'delete_version_store',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_version_store
        )

        def __get_content_object_image(
            self,
            org_slug,
            slug,
            document_family_id,
            page,
            **kwargs
        ):
            """get_content_object_image  # noqa: E501

            Generate a preview for a page of the latest content in a document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_image(org_slug, slug, document_family_id, page, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                document_family_id (str):
                page (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.get_content_object_image = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{documentFamilyId}/preview/{page}',
                'operation_id': 'get_content_object_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'page',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'document_family_id':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'document_family_id': 'documentFamilyId',
                    'page': 'page',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'document_family_id': 'path',
                    'page': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_image
        )

        def __get_content_object_image_with_version(
            self,
            org_slug,
            slug,
            version,
            document_family_id,
            page,
            **kwargs
        ):
            """get_content_object_image_with_version  # noqa: E501

            Generate a preview for a page of the latest content in a document family in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_image_with_version(org_slug, slug, version, document_family_id, page, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                document_family_id (str):
                page (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.get_content_object_image_with_version = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/preview/{page}',
                'operation_id': 'get_content_object_image_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'page',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'document_family_id': 'documentFamilyId',
                    'page': 'page',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'document_family_id': 'path',
                    'page': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_image_with_version
        )

        def __get_family(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """get_family  # noqa: E501

            Get a specific document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}',
                'operation_id': 'get_family',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family
        )

        def __get_family_by_path(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """get_family_by_path  # noqa: E501

            Get the document family for a path in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_by_path(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_family_by_path = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'get_family_by_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_by_path
        )

        def __get_family_by_path_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """get_family_by_path_with_version  # noqa: E501

            Get the document family for a path in the specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_by_path_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_family_by_path_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'get_family_by_path_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_by_path_with_version
        )

        def __get_family_events(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """get_family_events  # noqa: E501

            Get events for a specific document family in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_events(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PlatformEvent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_events = _Endpoint(
            settings={
                'response_type': ([PlatformEvent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/events',
                'operation_id': 'get_family_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_events
        )

        def __get_family_events_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_events_with_version  # noqa: E501

            Get events for a specific document family in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_events_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PlatformEvent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_events_with_version = _Endpoint(
            settings={
                'response_type': ([PlatformEvent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/events',
                'operation_id': 'get_family_events_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_events_with_version
        )

        def __get_family_table_counts(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_table_counts  # noqa: E501

            Get the counts of extracted data, by parent taxon, for a specific family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_table_counts(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (int,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_table_counts = _Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/tableCounts',
                'operation_id': 'get_family_table_counts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_table_counts
        )

        def __get_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_with_version  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'get_family_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_with_version
        )

        def __get_rows(
            self,
            org_slug,
            slug,
            query_context,
            **kwargs
        ):
            """get_rows  # noqa: E501

            Get the paginated rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_rows(org_slug, slug, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                table (str): [optional] if omitted the server will use the default value of ""
                parent (str): [optional] if omitted the server will use the default value of ""
                document_family_id (str): [optional] if omitted the server will use the default value of ""
                store_ref (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageStoredRow
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_rows = _Endpoint(
            settings={
                'response_type': (PageStoredRow,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/rows',
                'operation_id': 'get_rows',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'query',
                    'table',
                    'parent',
                    'document_family_id',
                    'store_ref',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                    'table':
                        (str,),
                    'parent':
                        (str,),
                    'document_family_id':
                        (str,),
                    'store_ref':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'query': 'query',
                    'table': 'table',
                    'parent': 'parent',
                    'document_family_id': 'documentFamilyId',
                    'store_ref': 'storeRef',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'query': 'query',
                    'table': 'query',
                    'parent': 'query',
                    'document_family_id': 'query',
                    'store_ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_rows
        )

        def __get_rows_with_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            **kwargs
        ):
            """get_rows_with_version  # noqa: E501

            Get the paginated rows from a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_rows_with_version(org_slug, slug, version, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                table (str): [optional] if omitted the server will use the default value of ""
                parent (str): [optional] if omitted the server will use the default value of ""
                document_family_id (str): [optional] if omitted the server will use the default value of ""
                store_ref (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageStoredRow
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_rows_with_version = _Endpoint(
            settings={
                'response_type': (PageStoredRow,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/rows',
                'operation_id': 'get_rows_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'query',
                    'table',
                    'parent',
                    'document_family_id',
                    'store_ref',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                    'table':
                        (str,),
                    'parent':
                        (str,),
                    'document_family_id':
                        (str,),
                    'store_ref':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'query': 'query',
                    'table': 'table',
                    'parent': 'parent',
                    'document_family_id': 'documentFamilyId',
                    'store_ref': 'storeRef',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'query': 'query',
                    'table': 'query',
                    'parent': 'query',
                    'document_family_id': 'query',
                    'store_ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_rows_with_version
        )

        def __get_store(
            self,
            organization_slug,
            slug,
            **kwargs
        ):
            """get_store  # noqa: E501

            Get the current version of the object with given slug  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_store(organization_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'get_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_store
        )

        def __get_store_metadata(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """get_store_metadata  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_store_metadata(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_store_metadata = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/metadata',
                'operation_id': 'get_store_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_store_metadata
        )

        def __get_store_metadata_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """get_store_metadata_with_version  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_store_metadata_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_store_metadata_with_version = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/metadata',
                'operation_id': 'get_store_metadata_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_store_metadata_with_version
        )

        def __get_taxonomies(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """get_taxonomies  # noqa: E501

            Get the taxonomies that are referenced (data store) in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_taxonomies(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Taxonomy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_taxonomies = _Endpoint(
            settings={
                'response_type': ([Taxonomy],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/taxonomies',
                'operation_id': 'get_taxonomies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_taxonomies
        )

        def __get_taxonomies_by_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """get_taxonomies_by_version  # noqa: E501

            Get the taxonomies that are referenced (data store) in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_taxonomies_by_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Taxonomy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_taxonomies_by_version = _Endpoint(
            settings={
                'response_type': ([Taxonomy],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/taxonomies',
                'operation_id': 'get_taxonomies_by_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_taxonomies_by_version
        )

        def __get_version_store(
            self,
            organization_slug,
            slug,
            version,
            **kwargs
        ):
            """get_version_store  # noqa: E501

            Get the specific version of the object with given slug  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_version_store(organization_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_version_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'get_version_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_version_store
        )

        def __list_families(
            self,
            org_slug,
            slug,
            query_context,
            **kwargs
        ):
            """list_families  # noqa: E501

            List (with pagination) the document families in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_families(org_slug, slug, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.list_families = _Endpoint(
            settings={
                'response_type': (PageDocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'list_families',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_families
        )

        def __list_families_with_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            **kwargs
        ):
            """list_families_with_version  # noqa: E501

            List (with pagination) the enriched (include transition events, and extracted data counts) document families in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_families_with_version(org_slug, slug, version, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.list_families_with_version = _Endpoint(
            settings={
                'response_type': (PageDocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'list_families_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_families_with_version
        )

        def __list_store(
            self,
            organization_slug,
            **kwargs
        ):
            """list_store  # noqa: E501

            Get a paginated list of the objects for an organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_store(organization_slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                include_public (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageStore
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            return self.call_with_http_info(**kwargs)

        self.list_store = _Endpoint(
            settings={
                'response_type': (PageStore,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}',
                'operation_id': 'list_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'query',
                    'include_public',
                ],
                'required': [
                    'organization_slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'query':
                        (str,),
                    'include_public':
                        (bool,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'query': 'query',
                    'include_public': 'includePublic',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'query': 'query',
                    'include_public': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_store
        )

        def __lock_family(
            self,
            org_slug,
            slug,
            family_id,
            **kwargs
        ):
            """lock_family  # noqa: E501

            Lock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lock_family(org_slug, slug, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.lock_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{familyId}/lock',
                'operation_id': 'lock_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__lock_family
        )

        def __lock_family_with_version(
            self,
            org_slug,
            slug,
            version,
            family_id,
            **kwargs
        ):
            """lock_family_with_version  # noqa: E501

            Lock the given family in the given version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lock_family_with_version(org_slug, slug, version, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.lock_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/lock',
                'operation_id': 'lock_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__lock_family_with_version
        )

        def __reindex_content_objects(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """reindex_content_objects  # noqa: E501

            Reindex  documents or data families in current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reindex_content_objects(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.reindex_content_objects = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/_reindex',
                'operation_id': 'reindex_content_objects',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reindex_content_objects
        )

        def __reindex_content_objects_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """reindex_content_objects_with_version  # noqa: E501

            Reindex documents or data in specified version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reindex_content_objects_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.reindex_content_objects_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/_reindex',
                'operation_id': 'reindex_content_objects_with_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reindex_content_objects_with_version
        )

        def __rename_family(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """rename_family  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rename_family(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                rename (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.rename_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'rename_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'rename',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'rename':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'rename': 'rename',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'rename': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rename_family
        )

        def __rename_family_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """rename_family_with_version  # noqa: E501

            Rename the path of a document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rename_family_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                rename (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.rename_family_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'rename_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'rename',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'rename':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'rename': 'rename',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'rename': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rename_family_with_version
        )

        def __reprocess_assistants(
            self,
            org_slug,
            slug,
            reprocess_request,
            **kwargs
        ):
            """reprocess_assistants  # noqa: E501

            Reprocess content in the store, allow you to provide a list of the family ID's  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants(org_slug, slug, reprocess_request, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                reprocess_request (ReprocessRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['reprocess_request'] = \
                reprocess_request
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/reprocessAssistants',
                'operation_id': 'reprocess_assistants',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'reprocess_request',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'reprocess_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'reprocess_request':
                        (ReprocessRequest,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'reprocess_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reprocess_assistants
        )

        def __reprocess_assistants_for_family(
            self,
            org_slug,
            slug,
            id,
            assistant_id,
            **kwargs
        ):
            """reprocess_assistants_for_family  # noqa: E501

            Reprocess content in this family for a specific set of assistants in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_for_family(org_slug, slug, id, assistant_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):
                assistant_id ([str]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            kwargs['assistant_id'] = \
                assistant_id
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_for_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_for_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                    'assistant_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                    'assistant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                    'assistant_id':
                        ([str],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                    'assistant_id': 'assistantId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                    'assistant_id': 'query',
                },
                'collection_format_map': {
                    'assistant_id': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reprocess_assistants_for_family
        )

        def __reprocess_assistants_for_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            assistant_id,
            **kwargs
        ):
            """reprocess_assistants_for_family_with_version  # noqa: E501

            Reprocess content in this family for a specific set of assistants in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_for_family_with_version(org_slug, slug, version, id, assistant_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                assistant_id ([str]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['assistant_id'] = \
                assistant_id
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_for_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_for_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'assistant_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'assistant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'assistant_id':
                        ([str],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'assistant_id': 'assistantId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'assistant_id': 'query',
                },
                'collection_format_map': {
                    'assistant_id': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reprocess_assistants_for_family_with_version
        )

        def __reprocess_assistants_with_version(
            self,
            org_slug,
            slug,
            version,
            reprocess_request,
            **kwargs
        ):
            """reprocess_assistants_with_version  # noqa: E501

            Reprocess content in the store, allow you to provide a list of the family ID's  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_with_version(org_slug, slug, version, reprocess_request, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                reprocess_request (ReprocessRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['reprocess_request'] = \
                reprocess_request
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'reprocess_request',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'reprocess_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'reprocess_request':
                        (ReprocessRequest,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'reprocess_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reprocess_assistants_with_version
        )

        def __search_family(
            self,
            org_slug,
            slug,
            id,
            query,
            **kwargs
        ):
            """search_family  # noqa: E501

            Perform a search on a specific document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_family(org_slug, slug, id, query, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):
                query (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            kwargs['query'] = \
                query
            return self.call_with_http_info(**kwargs)

        self.search_family = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/_search',
                'operation_id': 'search_family',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_family
        )

        def __search_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            query,
            **kwargs
        ):
            """search_family_with_version  # noqa: E501

            Perform a search on a specific document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_family_with_version(org_slug, slug, version, id, query, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                query (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['query'] = \
                query
            return self.call_with_http_info(**kwargs)

        self.search_family_with_version = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/_search',
                'operation_id': 'search_family_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_family_with_version
        )

        def __unlock_family(
            self,
            org_slug,
            slug,
            family_id,
            **kwargs
        ):
            """unlock_family  # noqa: E501

            Unlock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unlock_family(org_slug, slug, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.unlock_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{familyId}/unlock',
                'operation_id': 'unlock_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unlock_family
        )

        def __unlock_family_with_version(
            self,
            org_slug,
            slug,
            version,
            family_id,
            **kwargs
        ):
            """unlock_family_with_version  # noqa: E501

            Unlock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unlock_family_with_version(org_slug, slug, version, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.unlock_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/unlock',
                'operation_id': 'unlock_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unlock_family_with_version
        )

        def __update_content_object_in_family(
            self,
            org_slug,
            slug,
            version,
            id,
            object_id,
            **kwargs
        ):
            """update_content_object_in_family  # noqa: E501

            Update the contents of an object in a family (note that this will overwrite any content and not store a transition)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_content_object_in_family(org_slug, slug, version, id, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                object_id (str):

            Keyword Args:
                inline_object1 (InlineObject1): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.update_content_object_in_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/content',
                'operation_id': 'update_content_object_in_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'inline_object1',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'object_id':
                        (str,),
                    'inline_object1':
                        (InlineObject1,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'object_id': 'path',
                    'inline_object1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_content_object_in_family
        )

        def __update_family(
            self,
            org_slug,
            slug,
            version,
            id,
            document_family,
            **kwargs
        ):
            """update_family  # noqa: E501

            Update the metadata for a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_family(org_slug, slug, version, id, document_family, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                document_family (DocumentFamily):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['document_family'] = \
                document_family
            return self.call_with_http_info(**kwargs)

        self.update_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'update_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'document_family',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'document_family',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'document_family':
                        (DocumentFamily,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'document_family': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_family
        )

        def __update_overlay(
            self,
            org_slug,
            slug,
            version,
            id,
            object_id,
            overlay_id,
            **kwargs
        ):
            """update_overlay  # noqa: E501

            Update a overlay on a content object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_overlay(org_slug, slug, version, id, object_id, overlay_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                object_id (str):
                overlay_id (str):

            Keyword Args:
                inline_object (InlineObject): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['object_id'] = \
                object_id
            kwargs['overlay_id'] = \
                overlay_id
            return self.call_with_http_info(**kwargs)

        self.update_overlay = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/overlays/{overlayId}',
                'operation_id': 'update_overlay',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'overlay_id',
                    'inline_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'overlay_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'object_id':
                        (str,),
                    'overlay_id':
                        (str,),
                    'inline_object':
                        (InlineObject,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'object_id': 'objectId',
                    'overlay_id': 'overlayId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'object_id': 'path',
                    'overlay_id': 'path',
                    'inline_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_overlay
        )

        def __update_row(
            self,
            org_slug,
            slug,
            query_context,
            row_id,
            stored_row,
            **kwargs
        ):
            """update_row  # noqa: E501

            Get the paginated rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_row(org_slug, slug, query_context, row_id, stored_row, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):
                row_id (str):
                stored_row (StoredRow):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StoredRow
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            kwargs['row_id'] = \
                row_id
            kwargs['stored_row'] = \
                stored_row
            return self.call_with_http_info(**kwargs)

        self.update_row = _Endpoint(
            settings={
                'response_type': (StoredRow,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/rows/{rowId}',
                'operation_id': 'update_row',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'row_id',
                    'stored_row',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'row_id',
                    'stored_row',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'row_id':
                        (str,),
                    'stored_row':
                        (StoredRow,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'row_id': 'rowId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'row_id': 'path',
                    'stored_row': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_row
        )

        def __update_row_with_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            row_id,
            stored_row,
            **kwargs
        ):
            """update_row_with_version  # noqa: E501

            Get the paginated rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_row_with_version(org_slug, slug, version, query_context, row_id, stored_row, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):
                row_id (str):
                stored_row (StoredRow):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StoredRow
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            kwargs['row_id'] = \
                row_id
            kwargs['stored_row'] = \
                stored_row
            return self.call_with_http_info(**kwargs)

        self.update_row_with_version = _Endpoint(
            settings={
                'response_type': (StoredRow,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/rows/{rowId}',
                'operation_id': 'update_row_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'row_id',
                    'stored_row',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'row_id',
                    'stored_row',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'row_id':
                        (str,),
                    'stored_row':
                        (StoredRow,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'row_id': 'rowId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'row_id': 'path',
                    'stored_row': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_row_with_version
        )

        def __update_store(
            self,
            organization_slug,
            slug,
            store,
            **kwargs
        ):
            """update_store  # noqa: E501

            Update the current version object with given slug in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_store(organization_slug, slug, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.update_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'update_store',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_store
        )

        def __update_store_metadata(
            self,
            org_slug,
            slug,
            unknown_base_type,
            **kwargs
        ):
            """update_store_metadata  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_store_metadata(org_slug, slug, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                unknown_base_type (UNKNOWN_BASE_TYPE):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.update_store_metadata = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/metadata',
                'operation_id': 'update_store_metadata',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'unknown_base_type',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_store_metadata
        )

        def __update_store_metadata_with_version(
            self,
            org_slug,
            slug,
            version,
            unknown_base_type,
            **kwargs
        ):
            """update_store_metadata_with_version  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_store_metadata_with_version(org_slug, slug, version, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                unknown_base_type (UNKNOWN_BASE_TYPE):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.update_store_metadata_with_version = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/metadata',
                'operation_id': 'update_store_metadata_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'unknown_base_type',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_store_metadata_with_version
        )

        def __update_version_store(
            self,
            organization_slug,
            slug,
            version,
            store,
            **kwargs
        ):
            """update_version_store  # noqa: E501

            Update the object with given slug and version in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_version_store(organization_slug, slug, version, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.update_version_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'update_version_store',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_version_store
        )
