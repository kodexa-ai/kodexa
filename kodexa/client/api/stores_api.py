"""
    Kodexa

    Rethink how you work with documents  # noqa: E501

    The version of the OpenAPI document: ${git.build.version}
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kodexa.client.api_client import ApiClient, Endpoint as _Endpoint
from kodexa.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kodexa.client.model.bulk_delete import BulkDelete
from kodexa.client.model.bulk_lock import BulkLock
from kodexa.client.model.content_object import ContentObject
from kodexa.client.model.data_object import DataObject
from kodexa.client.model.document_family import DocumentFamily
from kodexa.client.model.feature_set import FeatureSet
from kodexa.client.model.inline_object import InlineObject
from kodexa.client.model.inline_object1 import InlineObject1
from kodexa.client.model.inline_object2 import InlineObject2
from kodexa.client.model.inline_object3 import InlineObject3
from kodexa.client.model.inline_object4 import InlineObject4
from kodexa.client.model.inline_object5 import InlineObject5
from kodexa.client.model.page_data_object import PageDataObject
from kodexa.client.model.page_document_family import PageDocumentFamily
from kodexa.client.model.page_store import PageStore
from kodexa.client.model.platform_event import PlatformEvent
from kodexa.client.model.query_context import QueryContext
from kodexa.client.model.reprocess_request import ReprocessRequest
from kodexa.client.model.search_content import SearchContent
from kodexa.client.model.store import Store
from kodexa.client.model.store_path import StorePath
from kodexa.client.model.taxonomy import Taxonomy


class StoresApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_content_object_to_family(
            self,
            org_slug,
            slug,
            transition_type,
            source_content_object_id,
            document_family_id,
            **kwargs
        ):
            """add_content_object_to_family  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_content_object_to_family(org_slug, slug, transition_type, source_content_object_id, document_family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                transition_type (str):
                source_content_object_id (str):
                document_family_id (str):

            Keyword Args:
                document (bool): [optional]
                document_version (str): [optional]
                inline_object5 (InlineObject5): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ContentObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['transition_type'] = \
                transition_type
            kwargs['source_content_object_id'] = \
                source_content_object_id
            kwargs['document_family_id'] = \
                document_family_id
            return self.call_with_http_info(**kwargs)

        self.add_content_object_to_family = _Endpoint(
            settings={
                'response_type': (ContentObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{documentFamilyId}/objects',
                'operation_id': 'add_content_object_to_family',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'transition_type',
                    'source_content_object_id',
                    'document_family_id',
                    'document',
                    'document_version',
                    'inline_object5',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'transition_type',
                    'source_content_object_id',
                    'document_family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'transition_type':
                        (str,),
                    'source_content_object_id':
                        (str,),
                    'document_family_id':
                        (str,),
                    'document':
                        (bool,),
                    'document_version':
                        (str,),
                    'inline_object5':
                        (InlineObject5,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'transition_type': 'transitionType',
                    'source_content_object_id': 'sourceContentObjectId',
                    'document_family_id': 'documentFamilyId',
                    'document': 'document',
                    'document_version': 'documentVersion',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'transition_type': 'query',
                    'source_content_object_id': 'query',
                    'document_family_id': 'path',
                    'document': 'query',
                    'document_version': 'query',
                    'inline_object5': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_content_object_to_family
        )

        def __browse_fs(
            self,
            org_slug,
            slug,
            query_context,
            **kwargs
        ):
            """browse_fs  # noqa: E501

            Get the document family for a path in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.browse_fs(org_slug, slug, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                path (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.browse_fs = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'browse_fs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'query',
                    'path',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'query': 'query',
                    'path': 'path',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'query': 'query',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__browse_fs
        )

        def __browse_fs_by_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            **kwargs
        ):
            """browse_fs_by_version  # noqa: E501

            Get the document family for a path in the specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.browse_fs_by_version(org_slug, slug, version, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):

            Keyword Args:
                path (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.browse_fs_by_version = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'browse_fs_by_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'path',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'path': 'path',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__browse_fs_by_version
        )

        def __bulk_set_lock(
            self,
            org_slug,
            slug,
            bulk_lock,
            **kwargs
        ):
            """bulk_set_lock  # noqa: E501

            Bulk set the lock on a list of document families  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_set_lock(org_slug, slug, bulk_lock, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                bulk_lock (BulkLock):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['bulk_lock'] = \
                bulk_lock
            return self.call_with_http_info(**kwargs)

        self.bulk_set_lock = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'bulk_set_lock',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'bulk_lock',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'bulk_lock',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'bulk_lock':
                        (BulkLock,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'bulk_lock': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_set_lock
        )

        def __bulk_set_lock_with_version(
            self,
            org_slug,
            slug,
            version,
            bulk_lock,
            **kwargs
        ):
            """bulk_set_lock_with_version  # noqa: E501

            Bulk set the lock on a list of document families  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_set_lock_with_version(org_slug, slug, version, bulk_lock, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                bulk_lock (BulkLock):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['bulk_lock'] = \
                bulk_lock
            return self.call_with_http_info(**kwargs)

        self.bulk_set_lock_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'bulk_set_lock_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_lock',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_lock',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'bulk_lock':
                        (BulkLock,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'bulk_lock': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_set_lock_with_version
        )

        def __create_content_object_with_version(
            self,
            org_slug,
            slug,
            version,
            transition_type,
            document,
            source_content_object_id,
            document_version,
            document_family_id,
            **kwargs
        ):
            """create_content_object_with_version  # noqa: E501

            Add a new content object to the family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_content_object_with_version(org_slug, slug, version, transition_type, document, source_content_object_id, document_version, document_family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                transition_type (str):
                document (bool):
                source_content_object_id (str):
                document_version (str):
                document_family_id (str):

            Keyword Args:
                inline_object4 (InlineObject4): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ContentObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['transition_type'] = \
                transition_type
            kwargs['document'] = \
                document
            kwargs['source_content_object_id'] = \
                source_content_object_id
            kwargs['document_version'] = \
                document_version
            kwargs['document_family_id'] = \
                document_family_id
            return self.call_with_http_info(**kwargs)

        self.create_content_object_with_version = _Endpoint(
            settings={
                'response_type': (ContentObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects',
                'operation_id': 'create_content_object_with_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'transition_type',
                    'document',
                    'source_content_object_id',
                    'document_version',
                    'document_family_id',
                    'inline_object4',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'transition_type',
                    'document',
                    'source_content_object_id',
                    'document_version',
                    'document_family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'transition_type':
                        (str,),
                    'document':
                        (bool,),
                    'source_content_object_id':
                        (str,),
                    'document_version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'inline_object4':
                        (InlineObject4,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'transition_type': 'transitionType',
                    'document': 'document',
                    'source_content_object_id': 'sourceContentObjectId',
                    'document_version': 'documentVersion',
                    'document_family_id': 'documentFamilyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'transition_type': 'query',
                    'document': 'query',
                    'source_content_object_id': 'query',
                    'document_version': 'query',
                    'document_family_id': 'path',
                    'inline_object4': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_content_object_with_version
        )

        def __create_rows(
            self,
            org_slug,
            slug,
            data_object,
            **kwargs
        ):
            """create_rows  # noqa: E501

            Add rows to the the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_rows(org_slug, slug, data_object, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                data_object ([DataObject]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['data_object'] = \
                data_object
            return self.call_with_http_info(**kwargs)

        self.create_rows = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/dataObjects',
                'operation_id': 'create_rows',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'data_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'data_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'data_object':
                        ([DataObject],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'data_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_rows
        )

        def __create_rows_for_version(
            self,
            org_slug,
            slug,
            version,
            data_object,
            **kwargs
        ):
            """create_rows_for_version  # noqa: E501

            Add a list of rows to a specific version of the store (import mode)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_rows_for_version(org_slug, slug, version, data_object, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                data_object ([DataObject]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['data_object'] = \
                data_object
            return self.call_with_http_info(**kwargs)

        self.create_rows_for_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/dataObjects',
                'operation_id': 'create_rows_for_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'data_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'data_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'data_object':
                        ([DataObject],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'data_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_rows_for_version
        )

        def __create_store(
            self,
            organization_slug,
            store,
            **kwargs
        ):
            """create_store  # noqa: E501

            Create a new instance of the object in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_store(organization_slug, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.create_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}',
                'operation_id': 'create_store',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_store
        )

        def __delete_content_object_with_version(
            self,
            org_slug,
            slug,
            version,
            document_family_id,
            id,
            **kwargs
        ):
            """delete_content_object_with_version  # noqa: E501

            Delete specific content object from document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_content_object_with_version(org_slug, slug, version, document_family_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                document_family_id (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_content_object_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects/{id}',
                'operation_id': 'delete_content_object_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'document_family_id': 'documentFamilyId',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'document_family_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_content_object_with_version
        )

        def __delete_content_objects_with_version(
            self,
            org_slug,
            slug,
            version,
            bulk_delete,
            **kwargs
        ):
            """delete_content_objects_with_version  # noqa: E501

            Bulk delete a set of document families the specified version  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_content_objects_with_version(org_slug, slug, version, bulk_delete, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                bulk_delete (BulkDelete):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['bulk_delete'] = \
                bulk_delete
            return self.call_with_http_info(**kwargs)

        self.delete_content_objects_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'delete_content_objects_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_delete',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'bulk_delete',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'bulk_delete':
                        (BulkDelete,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'bulk_delete': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_content_objects_with_version
        )

        def __delete_families(
            self,
            org_slug,
            slug,
            bulk_delete,
            **kwargs
        ):
            """delete_families  # noqa: E501

            Bulk delete a set of document families in the current version  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_families(org_slug, slug, bulk_delete, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                bulk_delete (BulkDelete):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['bulk_delete'] = \
                bulk_delete
            return self.call_with_http_info(**kwargs)

        self.delete_families = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'delete_families',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'bulk_delete',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'bulk_delete',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'bulk_delete':
                        (BulkDelete,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'bulk_delete': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_families
        )

        def __delete_family_by_id(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """delete_family_by_id  # noqa: E501

            Delete a specific document family in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_id(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_id = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}',
                'operation_id': 'delete_family_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_id
        )

        def __delete_family_by_path(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """delete_family_by_path  # noqa: E501

            Delete document family by path in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_path(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                path (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_path = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'delete_family_by_path',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'path',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'path': 'path',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_path
        )

        def __delete_family_by_path_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_family_by_path_with_version  # noqa: E501

            Delete document family by path in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_by_path_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                path (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_family_by_path_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'delete_family_by_path_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'path',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'path': 'path',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_by_path_with_version
        )

        def __delete_family_id_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """delete_family_id_with_version  # noqa: E501

            Delete a specific document family in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_family_id_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_family_id_with_version = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'delete_family_id_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_family_id_with_version
        )

        def __delete_rows(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """delete_rows  # noqa: E501

            Delete the rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_rows(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_rows = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/dataObjects',
                'operation_id': 'delete_rows',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_rows
        )

        def __delete_rows_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_rows_with_version  # noqa: E501

            Delete the rows from a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_rows_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_rows_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/dataObjects',
                'operation_id': 'delete_rows_with_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_rows_with_version
        )

        def __delete_store(
            self,
            organization_slug,
            slug,
            **kwargs
        ):
            """delete_store  # noqa: E501

            Delete the current version of the given object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_store(organization_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.delete_store = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'delete_store',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_store
        )

        def __delete_version_store(
            self,
            organization_slug,
            slug,
            version,
            **kwargs
        ):
            """delete_version_store  # noqa: E501

            Delete the specified version of the given object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_version_store(organization_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.delete_version_store = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'delete_version_store',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_version_store
        )

        def __get_content_object_content(
            self,
            org_slug,
            slug,
            document_family_id,
            id,
            query_context,
            **kwargs
        ):
            """get_content_object_content  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_content(org_slug, slug, document_family_id, id, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                document_family_id (str):
                id (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['id'] = \
                id
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_content_object_content = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{documentFamilyId}/objects/{id}/content',
                'operation_id': 'get_content_object_content',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'id',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'id',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'document_family_id':
                        (str,),
                    'id':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'document_family_id': 'documentFamilyId',
                    'id': 'id',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'document_family_id': 'path',
                    'id': 'path',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_content
        )

        def __get_content_object_content_with_version(
            self,
            org_slug,
            slug,
            version,
            document_family_id,
            id,
            query_context,
            **kwargs
        ):
            """get_content_object_content_with_version  # noqa: E501

            Get the contents of a specific object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_content_with_version(org_slug, slug, version, document_family_id, id, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                document_family_id (str):
                id (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['id'] = \
                id
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_content_object_content_with_version = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/objects/{id}/content',
                'operation_id': 'get_content_object_content_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'id',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'id':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'document_family_id': 'documentFamilyId',
                    'id': 'id',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'document_family_id': 'path',
                    'id': 'path',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_content_with_version
        )

        def __get_content_object_image(
            self,
            org_slug,
            slug,
            document_family_id,
            page,
            **kwargs
        ):
            """get_content_object_image  # noqa: E501

            Generate a preview for a page of the latest content in a document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_image(org_slug, slug, document_family_id, page, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                document_family_id (str):
                page (int):

            Keyword Args:
                dpi (int): [optional] if omitted the server will use the default value of 200
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.get_content_object_image = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{documentFamilyId}/preview/{page}',
                'operation_id': 'get_content_object_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'page',
                    'dpi',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'document_family_id',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'document_family_id':
                        (str,),
                    'page':
                        (int,),
                    'dpi':
                        (int,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'document_family_id': 'documentFamilyId',
                    'page': 'page',
                    'dpi': 'dpi',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'document_family_id': 'path',
                    'page': 'path',
                    'dpi': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_image
        )

        def __get_content_object_image_with_version(
            self,
            org_slug,
            slug,
            version,
            document_family_id,
            page,
            **kwargs
        ):
            """get_content_object_image_with_version  # noqa: E501

            Generate a preview for a page of the latest content in a document family in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_content_object_image_with_version(org_slug, slug, version, document_family_id, page, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                document_family_id (str):
                page (int):

            Keyword Args:
                dpi (int): [optional] if omitted the server will use the default value of 200
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['document_family_id'] = \
                document_family_id
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.get_content_object_image_with_version = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{documentFamilyId}/preview/{page}',
                'operation_id': 'get_content_object_image_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'page',
                    'dpi',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'document_family_id',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'document_family_id':
                        (str,),
                    'page':
                        (int,),
                    'dpi':
                        (int,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'document_family_id': 'documentFamilyId',
                    'page': 'page',
                    'dpi': 'dpi',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'document_family_id': 'path',
                    'page': 'path',
                    'dpi': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_content_object_image_with_version
        )

        def __get_data_objects(
            self,
            org_slug,
            slug,
            query_context,
            **kwargs
        ):
            """get_data_objects  # noqa: E501

            Get the paginated rows from the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_data_objects(org_slug, slug, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                path (str): [optional] if omitted the server will use the default value of ""
                parent_id (str): [optional] if omitted the server will use the default value of ""
                id (str): [optional] if omitted the server will use the default value of ""
                document_family_id (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDataObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_data_objects = _Endpoint(
            settings={
                'response_type': (PageDataObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/dataObjects',
                'operation_id': 'get_data_objects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'query',
                    'path',
                    'parent_id',
                    'id',
                    'document_family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                    'path':
                        (str,),
                    'parent_id':
                        (str,),
                    'id':
                        (str,),
                    'document_family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'query': 'query',
                    'path': 'path',
                    'parent_id': 'parentId',
                    'id': 'id',
                    'document_family_id': 'documentFamilyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'query': 'query',
                    'path': 'query',
                    'parent_id': 'query',
                    'id': 'query',
                    'document_family_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_data_objects
        )

        def __get_excel_download(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """get_excel_download  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_excel_download(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_excel_download = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/excel',
                'operation_id': 'get_excel_download',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_excel_download
        )

        def __get_family(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """get_family  # noqa: E501

            Get a specific document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}',
                'operation_id': 'get_family',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family
        )

        def __get_family_events(
            self,
            org_slug,
            slug,
            id,
            **kwargs
        ):
            """get_family_events  # noqa: E501

            Get events for a specific document family in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_events(org_slug, slug, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PlatformEvent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_events = _Endpoint(
            settings={
                'response_type': ([PlatformEvent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/events',
                'operation_id': 'get_family_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_events
        )

        def __get_family_events_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_events_with_version  # noqa: E501

            Get events for a specific document family in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_events_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PlatformEvent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_events_with_version = _Endpoint(
            settings={
                'response_type': ([PlatformEvent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/events',
                'operation_id': 'get_family_events_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_events_with_version
        )

        def __get_family_extracted_data_structure_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            project_id,
            **kwargs
        ):
            """get_family_extracted_data_structure_with_version  # noqa: E501

            Get the document structure for this document, based on its ID and the project through which we are viewing it  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_extracted_data_structure_with_version(org_slug, slug, version, id, project_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                project_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorePath]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['project_id'] = \
                project_id
            return self.call_with_http_info(**kwargs)

        self.get_family_extracted_data_structure_with_version = _Endpoint(
            settings={
                'response_type': ([StorePath],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/_structure/{projectId}',
                'operation_id': 'get_family_extracted_data_structure_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'project_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'project_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'project_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'project_id': 'projectId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'project_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_extracted_data_structure_with_version
        )

        def __get_family_extracted_data_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            query_context,
            **kwargs
        ):
            """get_family_extracted_data_with_version  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_extracted_data_with_version(org_slug, slug, version, id, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                query_context (QueryContext):

            Keyword Args:
                path (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDataObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_family_extracted_data_with_version = _Endpoint(
            settings={
                'response_type': (PageDataObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/dataObjects',
                'operation_id': 'get_family_extracted_data_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query_context',
                    'path',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'query_context': 'queryContext',
                    'path': 'path',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'query_context': 'query',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_extracted_data_with_version
        )

        def __get_family_table_counts(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_table_counts  # noqa: E501

            Get the counts of extracted data, by parent taxon, for a specific family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_table_counts(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (int,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_table_counts = _Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/pathCounts',
                'operation_id': 'get_family_table_counts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_table_counts
        )

        def __get_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            **kwargs
        ):
            """get_family_with_version  # noqa: E501

            Get a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_family_with_version(org_slug, slug, version, id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_family_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'get_family_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_family_with_version
        )

        def __get_rows_with_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            **kwargs
        ):
            """get_rows_with_version  # noqa: E501

            Get the paginated rows from a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_rows_with_version(org_slug, slug, version, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                path (str): [optional] if omitted the server will use the default value of ""
                parent_id (str): [optional] if omitted the server will use the default value of ""
                id (str): [optional] if omitted the server will use the default value of ""
                document_family_id (str): [optional] if omitted the server will use the default value of ""
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDataObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.get_rows_with_version = _Endpoint(
            settings={
                'response_type': (PageDataObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/dataObjects',
                'operation_id': 'get_rows_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'query',
                    'path',
                    'parent_id',
                    'id',
                    'document_family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                    'path':
                        (str,),
                    'parent_id':
                        (str,),
                    'id':
                        (str,),
                    'document_family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'query': 'query',
                    'path': 'path',
                    'parent_id': 'parentId',
                    'id': 'id',
                    'document_family_id': 'documentFamilyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'query': 'query',
                    'path': 'query',
                    'parent_id': 'query',
                    'id': 'query',
                    'document_family_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_rows_with_version
        )

        def __get_store(
            self,
            organization_slug,
            slug,
            **kwargs
        ):
            """get_store  # noqa: E501

            Get the current version of the object with given slug  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_store(organization_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'get_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_store
        )

        def __get_taxonomies(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """get_taxonomies  # noqa: E501

            Get the taxonomies that are referenced (data store) in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_taxonomies(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Taxonomy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.get_taxonomies = _Endpoint(
            settings={
                'response_type': ([Taxonomy],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/taxonomies',
                'operation_id': 'get_taxonomies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_taxonomies
        )

        def __get_taxonomies_by_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """get_taxonomies_by_version  # noqa: E501

            Get the taxonomies that are referenced (data store) in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_taxonomies_by_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Taxonomy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_taxonomies_by_version = _Endpoint(
            settings={
                'response_type': ([Taxonomy],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/taxonomies',
                'operation_id': 'get_taxonomies_by_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_taxonomies_by_version
        )

        def __get_version_store(
            self,
            organization_slug,
            slug,
            version,
            **kwargs
        ):
            """get_version_store  # noqa: E501

            Get the specific version of the object with given slug  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_version_store(organization_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_version_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'get_version_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_version_store
        )

        def __import_family(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """import_family  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.import_family(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                inline_object1 (InlineObject1): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.import_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'import_family',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'inline_object1',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'inline_object1':
                        (InlineObject1,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'inline_object1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__import_family
        )

        def __list_families(
            self,
            org_slug,
            slug,
            query_context,
            **kwargs
        ):
            """list_families  # noqa: E501

            List (with pagination) the document families in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_families(org_slug, slug, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.list_families = _Endpoint(
            settings={
                'response_type': (PageDocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families',
                'operation_id': 'list_families',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query_context',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query_context': 'queryContext',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query_context': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_families
        )

        def __list_families_with_version(
            self,
            org_slug,
            slug,
            version,
            query_context,
            **kwargs
        ):
            """list_families_with_version  # noqa: E501

            List (with pagination) the enriched (include transition events, and extracted data counts) document families in a specific version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_families_with_version(org_slug, slug, version, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query_context (QueryContext):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageDocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.list_families_with_version = _Endpoint(
            settings={
                'response_type': (PageDocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families',
                'operation_id': 'list_families_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                    'query',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query_context':
                        (QueryContext,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query_context': 'queryContext',
                    'query': 'query',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query_context': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_families_with_version
        )

        def __list_store(
            self,
            organization_slug,
            **kwargs
        ):
            """list_store  # noqa: E501

            Get a paginated list of the objects for an organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_store(organization_slug, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):

            Keyword Args:
                query (str): [optional] if omitted the server will use the default value of "*"
                include_public (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageStore
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            return self.call_with_http_info(**kwargs)

        self.list_store = _Endpoint(
            settings={
                'response_type': (PageStore,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}',
                'operation_id': 'list_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'query',
                    'include_public',
                ],
                'required': [
                    'organization_slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'query':
                        (str,),
                    'include_public':
                        (bool,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'query': 'query',
                    'include_public': 'includePublic',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'query': 'query',
                    'include_public': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_store
        )

        def __lock_family(
            self,
            org_slug,
            slug,
            family_id,
            **kwargs
        ):
            """lock_family  # noqa: E501

            Lock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lock_family(org_slug, slug, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.lock_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{familyId}/lock',
                'operation_id': 'lock_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__lock_family
        )

        def __lock_family_with_version(
            self,
            org_slug,
            slug,
            version,
            family_id,
            **kwargs
        ):
            """lock_family_with_version  # noqa: E501

            Lock the given family in the given version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lock_family_with_version(org_slug, slug, version, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.lock_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/lock',
                'operation_id': 'lock_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__lock_family_with_version
        )

        def __reindex_content_objects(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """reindex_content_objects  # noqa: E501

            Reindex  documents or data families in current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reindex_content_objects(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.reindex_content_objects = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/_reindex',
                'operation_id': 'reindex_content_objects',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reindex_content_objects
        )

        def __reindex_content_objects_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """reindex_content_objects_with_version  # noqa: E501

            Reindex documents or data in specified version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reindex_content_objects_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.reindex_content_objects_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/_reindex',
                'operation_id': 'reindex_content_objects_with_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reindex_content_objects_with_version
        )

        def __rename_family(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """rename_family  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rename_family(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                path (str): [optional]
                rename (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.rename_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'rename_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'path',
                    'rename',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'path':
                        (str,),
                    'rename':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'path': 'path',
                    'rename': 'rename',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'path': 'query',
                    'rename': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rename_family
        )

        def __rename_family_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """rename_family_with_version  # noqa: E501

            Rename the path of a document family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rename_family_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                path (str): [optional]
                rename (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.rename_family_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'rename_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'path',
                    'rename',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'path':
                        (str,),
                    'rename':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'path': 'path',
                    'rename': 'rename',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'path': 'query',
                    'rename': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rename_family_with_version
        )

        def __reprocess_assistants(
            self,
            org_slug,
            slug,
            reprocess_request,
            **kwargs
        ):
            """reprocess_assistants  # noqa: E501

            Reprocess content in the store, allow you to provide a list of the family ID's  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants(org_slug, slug, reprocess_request, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                reprocess_request (ReprocessRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['reprocess_request'] = \
                reprocess_request
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/reprocessAssistants',
                'operation_id': 'reprocess_assistants',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'reprocess_request',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'reprocess_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'reprocess_request':
                        (ReprocessRequest,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'reprocess_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reprocess_assistants
        )

        def __reprocess_assistants_for_family(
            self,
            org_slug,
            slug,
            id,
            assistant_id,
            **kwargs
        ):
            """reprocess_assistants_for_family  # noqa: E501

            Reprocess content in this family for a specific set of assistants in the current version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_for_family(org_slug, slug, id, assistant_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):
                assistant_id ([str]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            kwargs['assistant_id'] = \
                assistant_id
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_for_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_for_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                    'assistant_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                    'assistant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                    'assistant_id':
                        ([str],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                    'assistant_id': 'assistantId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                    'assistant_id': 'query',
                },
                'collection_format_map': {
                    'assistant_id': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reprocess_assistants_for_family
        )

        def __reprocess_assistants_for_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            assistant_id,
            **kwargs
        ):
            """reprocess_assistants_for_family_with_version  # noqa: E501

            Reprocess content in this family for a specific set of assistants in a version of a store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_for_family_with_version(org_slug, slug, version, id, assistant_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                assistant_id ([str]):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['assistant_id'] = \
                assistant_id
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_for_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_for_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'assistant_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'assistant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'assistant_id':
                        ([str],),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'assistant_id': 'assistantId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'assistant_id': 'query',
                },
                'collection_format_map': {
                    'assistant_id': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reprocess_assistants_for_family_with_version
        )

        def __reprocess_assistants_with_version(
            self,
            org_slug,
            slug,
            version,
            reprocess_request,
            **kwargs
        ):
            """reprocess_assistants_with_version  # noqa: E501

            Reprocess content in the store, allow you to provide a list of the family ID's  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reprocess_assistants_with_version(org_slug, slug, version, reprocess_request, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                reprocess_request (ReprocessRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['reprocess_request'] = \
                reprocess_request
            return self.call_with_http_info(**kwargs)

        self.reprocess_assistants_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/reprocessAssistants',
                'operation_id': 'reprocess_assistants_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'reprocess_request',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'reprocess_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'reprocess_request':
                        (ReprocessRequest,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'reprocess_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reprocess_assistants_with_version
        )

        def __search_family(
            self,
            org_slug,
            slug,
            id,
            query,
            query_context,
            **kwargs
        ):
            """search_family  # noqa: E501

            Perform a search on a specific document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_family(org_slug, slug, id, query, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                id (str):
                query (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['id'] = \
                id
            kwargs['query'] = \
                query
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.search_family = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{id}/_search',
                'operation_id': 'search_family',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'id',
                    'query',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'id',
                    'query',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'id':
                        (str,),
                    'query':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'id': 'id',
                    'query': 'query',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'id': 'path',
                    'query': 'query',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_family
        )

        def __search_family_with_version(
            self,
            org_slug,
            slug,
            version,
            id,
            query,
            query_context,
            **kwargs
        ):
            """search_family_with_version  # noqa: E501

            Perform a search on a specific document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_family_with_version(org_slug, slug, version, id, query, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                query (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['query'] = \
                query
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.search_family_with_version = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/_search',
                'operation_id': 'search_family_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'query',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'query':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'query': 'query',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'query': 'query',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_family_with_version
        )

        def __search_store(
            self,
            org_slug,
            slug,
            query,
            query_context,
            **kwargs
        ):
            """search_store  # noqa: E501

            Perform a search on a specific document family  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_store(org_slug, slug, query, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                query (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['query'] = \
                query
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.search_store = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/_search',
                'operation_id': 'search_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'query',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'query',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'query':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'query': 'query',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'query': 'query',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_store
        )

        def __search_store_with_version(
            self,
            org_slug,
            slug,
            version,
            query,
            query_context,
            **kwargs
        ):
            """search_store_with_version  # noqa: E501

            Perform a search on a specific store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_store_with_version(org_slug, slug, version, query, query_context, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                query (str):
                query_context (QueryContext):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchContent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['query'] = \
                query
            kwargs['query_context'] = \
                query_context
            return self.call_with_http_info(**kwargs)

        self.search_store_with_version = _Endpoint(
            settings={
                'response_type': ([SearchContent],),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/_search',
                'operation_id': 'search_store_with_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'query',
                    'query_context',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'query',
                    'query_context',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'query':
                        (str,),
                    'query_context':
                        (QueryContext,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'query': 'query',
                    'query_context': 'queryContext',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'query': 'query',
                    'query_context': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_store_with_version
        )

        def __unlock_family(
            self,
            org_slug,
            slug,
            family_id,
            **kwargs
        ):
            """unlock_family  # noqa: E501

            Unlock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unlock_family(org_slug, slug, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.unlock_family = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/families/{familyId}/unlock',
                'operation_id': 'unlock_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unlock_family
        )

        def __unlock_family_with_version(
            self,
            org_slug,
            slug,
            version,
            family_id,
            **kwargs
        ):
            """unlock_family_with_version  # noqa: E501

            Unlock the given family in the current version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unlock_family_with_version(org_slug, slug, version, family_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                family_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['family_id'] = \
                family_id
            return self.call_with_http_info(**kwargs)

        self.unlock_family_with_version = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{familyId}/unlock',
                'operation_id': 'unlock_family_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'family_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'family_id':
                        (str,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'family_id': 'familyId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'family_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unlock_family_with_version
        )

        def __update_content_object_in_family(
            self,
            org_slug,
            slug,
            version,
            id,
            object_id,
            **kwargs
        ):
            """update_content_object_in_family  # noqa: E501

            Update the contents of an object in a family (note that this will overwrite any content and not store a transition)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_content_object_in_family(org_slug, slug, version, id, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                object_id (str):

            Keyword Args:
                inline_object2 (InlineObject2): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.update_content_object_in_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/content',
                'operation_id': 'update_content_object_in_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'inline_object2',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'object_id':
                        (str,),
                    'inline_object2':
                        (InlineObject2,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'object_id': 'path',
                    'inline_object2': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_content_object_in_family
        )

        def __update_family(
            self,
            org_slug,
            slug,
            version,
            id,
            document_family,
            **kwargs
        ):
            """update_family  # noqa: E501

            Update the metadata for a specific document family in a version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_family(org_slug, slug, version, id, document_family, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                document_family (DocumentFamily):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['document_family'] = \
                document_family
            return self.call_with_http_info(**kwargs)

        self.update_family = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}',
                'operation_id': 'update_family',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'document_family',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'document_family',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'document_family':
                        (DocumentFamily,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'document_family': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_family
        )

        def __update_row(
            self,
            org_slug,
            slug,
            row_id,
            data_object,
            **kwargs
        ):
            """update_row  # noqa: E501

            Update a given row in the latest version of the store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_row(org_slug, slug, row_id, data_object, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                row_id (str):
                data_object (DataObject):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['row_id'] = \
                row_id
            kwargs['data_object'] = \
                data_object
            return self.call_with_http_info(**kwargs)

        self.update_row = _Endpoint(
            settings={
                'response_type': (DataObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/dataObjects/{rowId}',
                'operation_id': 'update_row',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'row_id',
                    'data_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'row_id',
                    'data_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'row_id':
                        (str,),
                    'data_object':
                        (DataObject,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'row_id': 'rowId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'row_id': 'path',
                    'data_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_row
        )

        def __update_row_with_version(
            self,
            org_slug,
            slug,
            version,
            row_id,
            data_object,
            **kwargs
        ):
            """update_row_with_version  # noqa: E501

            Update a given row  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_row_with_version(org_slug, slug, version, row_id, data_object, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                row_id (str):
                data_object (DataObject):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataObject
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['row_id'] = \
                row_id
            kwargs['data_object'] = \
                data_object
            return self.call_with_http_info(**kwargs)

        self.update_row_with_version = _Endpoint(
            settings={
                'response_type': (DataObject,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/dataObjects/{rowId}',
                'operation_id': 'update_row_with_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'row_id',
                    'data_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'row_id',
                    'data_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'row_id':
                        (str,),
                    'data_object':
                        (DataObject,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'row_id': 'rowId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'row_id': 'path',
                    'data_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_row_with_version
        )

        def __update_store(
            self,
            organization_slug,
            slug,
            store,
            **kwargs
        ):
            """update_store  # noqa: E501

            Update the current version object with given slug in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_store(organization_slug, slug, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.update_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}',
                'operation_id': 'update_store',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_store
        )

        def __update_tags_on_content_object(
            self,
            org_slug,
            slug,
            version,
            id,
            object_id,
            feature_set,
            **kwargs
        ):
            """update_tags_on_content_object  # noqa: E501

            Update the contents of an object in a family (note that this will overwrite any content and not store a transition)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_tags_on_content_object(org_slug, slug, version, id, object_id, feature_set, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):
                id (str):
                object_id (str):
                feature_set (FeatureSet):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['id'] = \
                id
            kwargs['object_id'] = \
                object_id
            kwargs['feature_set'] = \
                feature_set
            return self.call_with_http_info(**kwargs)

        self.update_tags_on_content_object = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/families/{id}/objects/{objectId}/_replaceTags',
                'operation_id': 'update_tags_on_content_object',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'feature_set',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                    'id',
                    'object_id',
                    'feature_set',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'id':
                        (str,),
                    'object_id':
                        (str,),
                    'feature_set':
                        (FeatureSet,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'id': 'id',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'id': 'path',
                    'object_id': 'path',
                    'feature_set': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_tags_on_content_object
        )

        def __update_version_store(
            self,
            organization_slug,
            slug,
            version,
            store,
            **kwargs
        ):
            """update_version_store  # noqa: E501

            Update the object with given slug and version in the organization  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_version_store(organization_slug, slug, version, store, async_req=True)
            >>> result = thread.get()

            Args:
                organization_slug (str):
                slug (str):
                version (str):
                store (Store):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Store
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_slug'] = \
                organization_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            kwargs['store'] = \
                store
            return self.call_with_http_info(**kwargs)

        self.update_version_store = _Endpoint(
            settings={
                'response_type': (Store,),
                'auth': [],
                'endpoint_path': '/api/stores/{organizationSlug}/{slug}/{version}',
                'operation_id': 'update_version_store',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_slug',
                    'slug',
                    'version',
                    'store',
                ],
                'required': [
                    'organization_slug',
                    'slug',
                    'version',
                    'store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'store':
                        (Store,),
                },
                'attribute_map': {
                    'organization_slug': 'organizationSlug',
                    'slug': 'slug',
                    'version': 'version',
                },
                'location_map': {
                    'organization_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'store': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_version_store
        )

        def __upload_to_path(
            self,
            org_slug,
            slug,
            **kwargs
        ):
            """upload_to_path  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_to_path(org_slug, slug, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):

            Keyword Args:
                path (str): [optional]
                document_version (str): [optional] if omitted the server will use the default value of ""
                inline_object3 (InlineObject3): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            return self.call_with_http_info(**kwargs)

        self.upload_to_path = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/fs/**',
                'operation_id': 'upload_to_path',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'path',
                    'document_version',
                    'inline_object3',
                ],
                'required': [
                    'org_slug',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'path':
                        (str,),
                    'document_version':
                        (str,),
                    'inline_object3':
                        (InlineObject3,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'path': 'path',
                    'document_version': 'documentVersion',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'path': 'query',
                    'document_version': 'query',
                    'inline_object3': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__upload_to_path
        )

        def __upload_to_path_with_version(
            self,
            org_slug,
            slug,
            version,
            **kwargs
        ):
            """upload_to_path_with_version  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_to_path_with_version(org_slug, slug, version, async_req=True)
            >>> result = thread.get()

            Args:
                org_slug (str):
                slug (str):
                version (str):

            Keyword Args:
                path (str): [optional]
                document_version (str): [optional] if omitted the server will use the default value of ""
                inline_object (InlineObject): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentFamily
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_slug'] = \
                org_slug
            kwargs['slug'] = \
                slug
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.upload_to_path_with_version = _Endpoint(
            settings={
                'response_type': (DocumentFamily,),
                'auth': [],
                'endpoint_path': '/api/stores/{orgSlug}/{slug}/{version}/fs/**',
                'operation_id': 'upload_to_path_with_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_slug',
                    'slug',
                    'version',
                    'path',
                    'document_version',
                    'inline_object',
                ],
                'required': [
                    'org_slug',
                    'slug',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_slug':
                        (str,),
                    'slug':
                        (str,),
                    'version':
                        (str,),
                    'path':
                        (str,),
                    'document_version':
                        (str,),
                    'inline_object':
                        (InlineObject,),
                },
                'attribute_map': {
                    'org_slug': 'orgSlug',
                    'slug': 'slug',
                    'version': 'version',
                    'path': 'path',
                    'document_version': 'documentVersion',
                },
                'location_map': {
                    'org_slug': 'path',
                    'slug': 'path',
                    'version': 'path',
                    'path': 'query',
                    'document_version': 'query',
                    'inline_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__upload_to_path_with_version
        )
