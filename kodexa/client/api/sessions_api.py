"""
    Kodexa

    Rethink how you work with documents  # noqa: E501

    The version of the OpenAPI document: 4.0.179
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kodexa.client.api_client import ApiClient, Endpoint as _Endpoint
from kodexa.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kodexa.client.model.cloud_execution import CloudExecution
from kodexa.client.model.cloud_session_event import CloudSessionEvent
from kodexa.client.model.cloud_store import CloudStore
from kodexa.client.model.page_cloud_execution import PageCloudExecution
from kodexa.client.model.page_cloud_session import PageCloudSession
from kodexa.client.model.page_cloud_session_event import PageCloudSessionEvent
from kodexa.client.model.pipeline import Pipeline


class SessionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_pipeline_session_by_pipeline(
            self,
            pipeline,
            assistant,
            action,
            pipeline2,
            **kwargs
        ):
            """create_pipeline_session_by_pipeline  # noqa: E501

            Create a session for the action by reference  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_pipeline_session_by_pipeline(pipeline, assistant, action, pipeline2, async_req=True)
            >>> result = thread.get()

            Args:
                pipeline (str):
                assistant (str):
                action (str):
                pipeline2 (Pipeline):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pipeline'] = \
                pipeline
            kwargs['assistant'] = \
                assistant
            kwargs['action'] = \
                action
            kwargs['pipeline2'] = \
                pipeline2
            return self.call_with_http_info(**kwargs)

        self.create_pipeline_session_by_pipeline = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/sessions',
                'operation_id': 'create_pipeline_session_by_pipeline',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pipeline',
                    'assistant',
                    'action',
                    'pipeline2',
                    'x_access_token',
                ],
                'required': [
                    'pipeline',
                    'assistant',
                    'action',
                    'pipeline2',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pipeline':
                        (str,),
                    'assistant':
                        (str,),
                    'action':
                        (str,),
                    'pipeline2':
                        (Pipeline,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'pipeline': 'pipeline',
                    'assistant': 'assistant',
                    'action': 'action',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'pipeline': 'query',
                    'assistant': 'query',
                    'action': 'query',
                    'pipeline2': 'body',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_pipeline_session_by_pipeline
        )

        def __get_events(
            self,
            session_id,
            **kwargs
        ):
            """get_events  # noqa: E501

            Get a paginated list of the events for a specific session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_events(session_id, async_req=True)
            >>> result = thread.get()

            Args:
                session_id (str):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageCloudSessionEvent
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['session_id'] = \
                session_id
            return self.call_with_http_info(**kwargs)

        self.get_events = _Endpoint(
            settings={
                'response_type': (PageCloudSessionEvent,),
                'auth': [],
                'endpoint_path': '/api/sessions/{sessionId}/events',
                'operation_id': 'get_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'session_id',
                    'x_access_token',
                ],
                'required': [
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'session_id':
                        (str,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'session_id': 'sessionId',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'session_id': 'path',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_events
        )

        def __get_execution(
            self,
            id,
            execution_id,
            **kwargs
        ):
            """get_execution  # noqa: E501

            Get the specified execution in the session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution(id, execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                execution_id (str):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CloudExecution
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution = _Endpoint(
            settings={
                'response_type': (CloudExecution,),
                'auth': [],
                'endpoint_path': '/api/sessions/{id}/executions/{executionId}',
                'operation_id': 'get_execution',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'execution_id',
                    'x_access_token',
                ],
                'required': [
                    'id',
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'execution_id':
                        (str,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'execution_id': 'executionId',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'id': 'path',
                    'execution_id': 'path',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution
        )

        def __get_execution_store(
            self,
            session_id,
            store_id,
            execution_id,
            **kwargs
        ):
            """get_execution_store  # noqa: E501

            Get the data and structure of a session store  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_store(session_id, store_id, execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                session_id (str):
                store_id (str):
                execution_id (str):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CloudStore
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['session_id'] = \
                session_id
            kwargs['store_id'] = \
                store_id
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_store = _Endpoint(
            settings={
                'response_type': (CloudStore,),
                'auth': [],
                'endpoint_path': '/api/sessions/{sessionId}/executions/{executionId}/stores/{storeId}',
                'operation_id': 'get_execution_store',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'session_id',
                    'store_id',
                    'execution_id',
                    'x_access_token',
                ],
                'required': [
                    'session_id',
                    'store_id',
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'session_id':
                        (str,),
                    'store_id':
                        (str,),
                    'execution_id':
                        (str,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'session_id': 'sessionId',
                    'store_id': 'storeId',
                    'execution_id': 'executionId',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'session_id': 'path',
                    'store_id': 'path',
                    'execution_id': 'path',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_store
        )

        def __get_session(
            self,
            x_access_token,
            session_id,
            **kwargs
        ):
            """get_session  # noqa: E501

            Get the specific session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_session(x_access_token, session_id, async_req=True)
            >>> result = thread.get()

            Args:
                x_access_token (str):
                session_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_access_token'] = \
                x_access_token
            kwargs['session_id'] = \
                session_id
            return self.call_with_http_info(**kwargs)

        self.get_session = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [],
                'endpoint_path': '/api/sessions/{sessionId}',
                'operation_id': 'get_session',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_access_token',
                    'session_id',
                ],
                'required': [
                    'x_access_token',
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_access_token':
                        (str,),
                    'session_id':
                        (str,),
                },
                'attribute_map': {
                    'x_access_token': 'x-access-token',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'x_access_token': 'header',
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_session
        )

        def __list_executions(
            self,
            id,
            **kwargs
        ):
            """list_executions  # noqa: E501

            Gets paginated list of executions in the session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_executions(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageCloudExecution
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.list_executions = _Endpoint(
            settings={
                'response_type': (PageCloudExecution,),
                'auth': [],
                'endpoint_path': '/api/sessions/{id}/executions',
                'operation_id': 'list_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'x_access_token',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'id': 'path',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_executions
        )

        def __list_sessions(
            self,
            **kwargs
        ):
            """list_sessions  # noqa: E501

            Get a list of the sessions by access token  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sessions(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PageCloudSession
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_sessions = _Endpoint(
            settings={
                'response_type': (PageCloudSession,),
                'auth': [],
                'endpoint_path': '/api/sessions',
                'operation_id': 'list_sessions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_access_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sessions
        )

        def __process_event(
            self,
            x_access_token,
            session_id,
            cloud_session_event,
            **kwargs
        ):
            """process_event  # noqa: E501

            Pass, and process, a new event in the session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.process_event(x_access_token, session_id, cloud_session_event, async_req=True)
            >>> result = thread.get()

            Args:
                x_access_token (str):
                session_id (str):
                cloud_session_event (CloudSessionEvent):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CloudExecution
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_access_token'] = \
                x_access_token
            kwargs['session_id'] = \
                session_id
            kwargs['cloud_session_event'] = \
                cloud_session_event
            return self.call_with_http_info(**kwargs)

        self.process_event = _Endpoint(
            settings={
                'response_type': (CloudExecution,),
                'auth': [],
                'endpoint_path': '/api/sessions/{sessionId}/events',
                'operation_id': 'process_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_access_token',
                    'session_id',
                    'cloud_session_event',
                ],
                'required': [
                    'x_access_token',
                    'session_id',
                    'cloud_session_event',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_access_token':
                        (str,),
                    'session_id':
                        (str,),
                    'cloud_session_event':
                        (CloudSessionEvent,),
                },
                'attribute_map': {
                    'x_access_token': 'x-access-token',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'x_access_token': 'header',
                    'session_id': 'path',
                    'cloud_session_event': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__process_event
        )

        def __update_execution_store(
            self,
            session_id,
            store_id,
            execution_id,
            cloud_store,
            **kwargs
        ):
            """update_execution_store  # noqa: E501

            Update a execution-based store content  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_execution_store(session_id, store_id, execution_id, cloud_store, async_req=True)
            >>> result = thread.get()

            Args:
                session_id (str):
                store_id (str):
                execution_id (str):
                cloud_store (CloudStore):

            Keyword Args:
                x_access_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CloudStore
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['session_id'] = \
                session_id
            kwargs['store_id'] = \
                store_id
            kwargs['execution_id'] = \
                execution_id
            kwargs['cloud_store'] = \
                cloud_store
            return self.call_with_http_info(**kwargs)

        self.update_execution_store = _Endpoint(
            settings={
                'response_type': (CloudStore,),
                'auth': [],
                'endpoint_path': '/api/sessions/{sessionId}/executions/{executionId}/stores/{storeId}',
                'operation_id': 'update_execution_store',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'session_id',
                    'store_id',
                    'execution_id',
                    'cloud_store',
                    'x_access_token',
                ],
                'required': [
                    'session_id',
                    'store_id',
                    'execution_id',
                    'cloud_store',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'session_id':
                        (str,),
                    'store_id':
                        (str,),
                    'execution_id':
                        (str,),
                    'cloud_store':
                        (CloudStore,),
                    'x_access_token':
                        (str,),
                },
                'attribute_map': {
                    'session_id': 'sessionId',
                    'store_id': 'storeId',
                    'execution_id': 'executionId',
                    'x_access_token': 'x-access-token',
                },
                'location_map': {
                    'session_id': 'path',
                    'store_id': 'path',
                    'execution_id': 'path',
                    'cloud_store': 'body',
                    'x_access_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_execution_store
        )
